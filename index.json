[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "lib/ast/actions/index.js",
    "content": "export const VISIT = \"VISIT\";\nexport function visit(context, ast) {\n  return {\n    type: VISIT,\n    context, ast\n  }\n}\n\nexport const DONE_VISITING = \"DONE_VISITING\";\nexport function doneVisiting() {\n  return {\n    type: DONE_VISITING\n  };\n}\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/ast/actions/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "VISIT",
    "memberof": "lib/ast/actions/index.js",
    "static": true,
    "longname": "lib/ast/actions/index.js~VISIT",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/ast/actions/index.js",
    "importStyle": "{VISIT}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "function",
    "name": "visit",
    "memberof": "lib/ast/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ast/actions/index.js~visit",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/ast/actions/index.js",
    "importStyle": "{visit}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "context",
        "types": [
          "*"
        ]
      },
      {
        "name": "ast",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"context\": *, \"ast\": *}"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "DONE_VISITING",
    "memberof": "lib/ast/actions/index.js",
    "static": true,
    "longname": "lib/ast/actions/index.js~DONE_VISITING",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/ast/actions/index.js",
    "importStyle": "{DONE_VISITING}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "function",
    "name": "doneVisiting",
    "memberof": "lib/ast/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ast/actions/index.js~doneVisiting",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/ast/actions/index.js",
    "importStyle": "{doneVisiting}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"type\": *}"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "file",
    "name": "lib/ast/map.js",
    "content": "import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:ast:map\");\n\nimport IntervalTree from \"node-interval-tree\";\n\n\n/**\n * @private\n */\nexport function getRange(node) {\n  // src: \"<start>:<length>:<_>\"\n  // returns [start, end]\n  let [start, length] = node.src\n    .split(\":\")\n    .slice(0, 2)\n    .map( (i) => parseInt(i) );\n\n  return [start, start + length];\n}\n\n/**\n * @private\n */\nexport function rangeNodes(node, pointer = \"\") {\n  if (node instanceof Array) {\n    return [].concat(\n      ...node.map( (sub, i) => rangeNodes(sub, `${pointer}/${i}`) )\n    );\n  } else if (node instanceof Object) {\n    let results = [];\n\n    if (node.src) {\n      results.push({pointer, range: getRange(node)});\n    }\n\n    return results.concat(\n      ...Object.keys(node).map(\n        (key) => rangeNodes(node[key], `${pointer}/${key}`)\n      )\n    );\n  } else {\n    return [];\n  }\n}\n\n/**\n * @private\n */\nexport function findRange(node, sourceStart, sourceLength) {\n  let ranges = rangeNodes(node);\n  let tree = new IntervalTree();\n\n  ranges.forEach( ({range, pointer}) => {\n    let [start, end] = range;\n\n    tree.insert(start, end, {range, pointer});\n  });\n\n  let sourceEnd = sourceStart + sourceLength;\n\n  let overlapping = tree.search(sourceStart, sourceEnd);\n\n  // find nodes that fully contain requested range,\n  // return longest pointer\n  return overlapping\n    .filter( ({range}) => sourceStart >= range[0] && sourceEnd <= range[1] )\n    .map( ({pointer}) => pointer )\n    .reduce( (a, b) => a.length > b.length ? a : b, \"\" );\n}\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/ast/map.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 54,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/ast/map.js",
    "static": true,
    "longname": "lib/ast/map.js~debug",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/ast/map.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 55,
    "kind": "function",
    "name": "getRange",
    "memberof": "lib/ast/map.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ast/map.js~getRange",
    "access": "private",
    "export": true,
    "importPath": "truffle-debugger/lib/ast/map.js",
    "importStyle": "{getRange}",
    "description": "",
    "lineNumber": 10,
    "ignore": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "function",
    "name": "rangeNodes",
    "memberof": "lib/ast/map.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ast/map.js~rangeNodes",
    "access": "private",
    "export": true,
    "importPath": "truffle-debugger/lib/ast/map.js",
    "importStyle": "{rangeNodes}",
    "description": "",
    "lineNumber": 24,
    "ignore": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "pointer",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "",
        "defaultValue": ""
      }
    ],
    "return": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "function",
    "name": "findRange",
    "memberof": "lib/ast/map.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/ast/map.js~findRange",
    "access": "private",
    "export": true,
    "importPath": "truffle-debugger/lib/ast/map.js",
    "importStyle": "{findRange}",
    "description": "",
    "lineNumber": 49,
    "ignore": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "sourceStart",
        "types": [
          "*"
        ]
      },
      {
        "name": "sourceLength",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "file",
    "name": "lib/ast/sagas/index.js",
    "content": "import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:ast:sagas\");\n\nimport { all, call, race, fork, join, take, takeEvery, put, select } from \"redux-saga/effects\";\n\nimport { prefixName } from \"lib/helpers\";\n\nimport * as data from \"lib/data/sagas\";\n\nimport * as actions from \"../actions\";\n\nimport ast from \"../selectors\";\n\n\nfunction *walk(context, node, pointer = \"\", parentId = null) {\n  debug(\"walking %o %o\", pointer, node);\n\n  yield *handleEnter(context, node, pointer, parentId);\n\n  if (node instanceof Array) {\n    for (let [i, child] of node.entries()) {\n      yield call(walk, context, child, `${pointer}/${i}`, parentId);\n    }\n  } else if (node instanceof Object) {\n    for (let [key, child] of Object.entries(node)) {\n      yield call(walk, context, child, `${pointer}/${key}`, node.id);\n    }\n  }\n\n  yield *handleExit(context, node, pointer);\n}\n\nfunction *handleEnter(context, node, pointer, parentId) {\n  if (!(node instanceof Object)) {\n    return;\n  }\n\n  debug(\"entering %s\", pointer);\n\n  if (node.id !== undefined) {\n    debug(\"%s recording scope %s\", pointer, node.id);\n    yield *data.scope(context, node.id, pointer, parentId);\n  }\n\n  switch (node.nodeType) {\n    case \"VariableDeclaration\":\n      debug(\"%s recording variable %o\", pointer, node);\n      yield *data.declare(context, node);\n      break;\n  }\n}\n\nfunction *handleExit(context, node, pointer) {\n  debug(\"exiting %s\", pointer);\n\n  // no-op right now\n}\n\nfunction *walkSaga({context, ast}) {\n  yield walk(context, ast);\n}\n\nexport function *visitAll(idx) {\n  let contexts = yield select(ast.views.contexts);\n\n  let tasks = yield all(\n    contexts.map((context, idx) => [context, idx])\n      .filter( ([{ast}]) => !!ast )\n      .map( ([{ast}, idx]) => fork( () => put(actions.visit(idx, ast))) )\n  )\n\n  if (tasks.length > 0) {\n    yield join(...tasks);\n  }\n\n  yield put(actions.doneVisiting());\n}\n\nexport function* saga() {\n  yield race({\n    visitor: takeEvery(actions.VISIT, walkSaga),\n    done: take(actions.DONE_VISITING)\n  });\n}\n\nexport default prefixName(\"ast\", saga);\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/ast/sagas/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 59,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/ast/sagas/index.js",
    "static": true,
    "longname": "lib/ast/sagas/index.js~debug",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/ast/sagas/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 60,
    "kind": "function",
    "name": "walk",
    "memberof": "lib/ast/sagas/index.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/ast/sagas/index.js~walk",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/ast/sagas/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "context",
        "types": [
          "*"
        ]
      },
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "pointer",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "",
        "defaultValue": ""
      },
      {
        "name": "parentId",
        "optional": true,
        "types": [
          "undefined"
        ],
        "defaultValue": "undefined"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 61,
    "kind": "function",
    "name": "handleEnter",
    "memberof": "lib/ast/sagas/index.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/ast/sagas/index.js~handleEnter",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/ast/sagas/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [
      {
        "name": "context",
        "types": [
          "*"
        ]
      },
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "pointer",
        "types": [
          "*"
        ]
      },
      {
        "name": "parentId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 62,
    "kind": "function",
    "name": "handleExit",
    "memberof": "lib/ast/sagas/index.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/ast/sagas/index.js~handleExit",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/ast/sagas/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [
      {
        "name": "context",
        "types": [
          "*"
        ]
      },
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "pointer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 63,
    "kind": "function",
    "name": "walkSaga",
    "memberof": "lib/ast/sagas/index.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/ast/sagas/index.js~walkSaga",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/ast/sagas/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"context\": *, \"ast\": *}"
        ],
        "defaultRaw": {
          "context": null,
          "ast": null
        },
        "defaultValue": "{\"context\":null,\"ast\":null}"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 64,
    "kind": "function",
    "name": "visitAll",
    "memberof": "lib/ast/sagas/index.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/ast/sagas/index.js~visitAll",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/ast/sagas/index.js",
    "importStyle": "{visitAll}",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [
      {
        "name": "idx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 65,
    "kind": "function",
    "name": "saga",
    "memberof": "lib/ast/sagas/index.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/ast/sagas/index.js~saga",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/ast/sagas/index.js",
    "importStyle": "{saga}",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 66,
    "kind": "file",
    "name": "lib/ast/selectors/index.js",
    "content": "import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:ast:selectors\");\n\nimport { createSelectorTree, createLeaf } from \"reselect-tree\";\nimport jsonpointer from \"json-pointer\";\n\nimport context from \"lib/context/selectors\";\nimport solidity from \"lib/solidity/selectors\";\n\nimport { findRange } from \"../map\";\n\n\n/**\n * ast\n */\nconst ast = createSelectorTree({\n  /**\n   * ast.views\n   */\n  views: {\n    /**\n     * ast.views.contexts\n     */\n    contexts: createLeaf([context.list], cs => cs)\n  },\n\n  /**\n   * ast.current\n   */\n  current: {\n\n    /**\n     * ast.current.tree\n     *\n     * ast for current context\n     */\n    tree: createLeaf(\n      [context.current], (context) => context.ast\n    ),\n\n    /**\n     * ast.current.index\n     *\n     * index in context list\n     */\n    index: createLeaf(\n      [context.current, context.indexBy.binary], (context, indexBy) =>\n        indexBy(context.binary)\n    )\n  },\n\n  /**\n   * ast.by\n   *\n   * ast lookups\n   */\n  by: {\n\n    /**\n     * ast.by.index\n     *\n     * ast for context index\n     */\n    index: createLeaf(\n      [context.list], (list) => list.map( (context) => context.ast )\n    ),\n\n    /**\n     * ast.by.address\n     *\n     * ast for context with address\n     */\n    address: createLeaf(\n      [context.by.address],\n\n      (contexts) => ({\n        ...Object.assign(\n          {},\n          ...Object.entries(contexts)\n            .map( ([address, context]) => ({ [address]: context.ast }) )\n        )\n      })\n    ),\n\n    /**\n     * ast.by.binary\n     *\n     * ast for context with binary\n     */\n    binary: createLeaf(\n      [context.by.binary],\n\n      (contexts) => ({\n        ...Object.assign(\n          {},\n          ...Object.entries(contexts)\n            .map( ([binary, context]) => ({ [binary]: context.ast }) )\n        )\n      })\n    ),\n  },\n\n  /**\n   * ast.next\n   */\n  next: {\n\n    /**\n     * ast.next.pointer\n     *\n     * jsonpointer for next ast node\n     */\n    pointer: createLeaf(\n      [\"/current/tree\", solidity.next.sourceRange], (ast, range) =>\n        findRange(ast, range.start, range.length)\n    ),\n\n    /**\n     * ast.next.node\n     *\n     * next ast node to execute\n     */\n    node: createLeaf(\n      [\"/current/tree\", \"./pointer\"], (ast, pointer) =>\n        jsonpointer.get(ast, pointer)\n    ),\n\n  }\n});\n\nexport default ast;\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/ast/selectors/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 67,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/ast/selectors/index.js",
    "static": true,
    "longname": "lib/ast/selectors/index.js~debug",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/ast/selectors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 68,
    "kind": "variable",
    "name": "ast",
    "memberof": "lib/ast/selectors/index.js",
    "static": true,
    "longname": "lib/ast/selectors/index.js~ast",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/ast/selectors/index.js",
    "importStyle": "ast",
    "description": "ast",
    "lineNumber": 16,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "file",
    "name": "lib/context/actions/index.js",
    "content": "export const ADD_CONTEXT = \"ADD_CONTEXT\";\nexport function addContext(context) {\n  return {\n    type: ADD_CONTEXT,\n    context\n  }\n}\n\nexport const MERGE_CONTEXT = \"MERGE_CONTEXT\";\nexport function mergeContext(index, context) {\n  return {\n    type: MERGE_CONTEXT,\n    index,\n    context\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/context/actions/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 70,
    "kind": "variable",
    "name": "ADD_CONTEXT",
    "memberof": "lib/context/actions/index.js",
    "static": true,
    "longname": "lib/context/actions/index.js~ADD_CONTEXT",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/context/actions/index.js",
    "importStyle": "{ADD_CONTEXT}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "function",
    "name": "addContext",
    "memberof": "lib/context/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/context/actions/index.js~addContext",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/context/actions/index.js",
    "importStyle": "{addContext}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "context",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"context\": *}"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "variable",
    "name": "MERGE_CONTEXT",
    "memberof": "lib/context/actions/index.js",
    "static": true,
    "longname": "lib/context/actions/index.js~MERGE_CONTEXT",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/context/actions/index.js",
    "importStyle": "{MERGE_CONTEXT}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "function",
    "name": "mergeContext",
    "memberof": "lib/context/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/context/actions/index.js~mergeContext",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/context/actions/index.js",
    "importStyle": "{mergeContext}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "context",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"index\": *, \"context\": *}"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "file",
    "name": "lib/context/reducers.js",
    "content": "import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:context:reducers\");\n\nimport assert from \"assert\";\n\nimport { combineReducers } from \"redux\";\n\nimport * as actions from \"./actions\";\n\nfunction merge(context, ...others) {\n  let {\n    binary,\n    addresses,\n    ast,\n    sourceMap,\n    source,\n    sourcePath,\n    contractName\n  } = context;\n\n  for (let other of others) {\n    addresses = [...new Set([...addresses, ...other.addresses])];\n\n    ast = ast || other.ast;\n    sourceMap = sourceMap || other.sourceMap;\n    source = source || other.source;\n    sourcePath = sourcePath || other.sourcePath;\n    contractName = contractName || other.contractName;\n  }\n\n  return {\n    binary,\n    addresses,\n    ast,\n    sourceMap,\n    source,\n    sourcePath,\n    contractName\n  }\n}\n\nexport function list(state = [], action) {\n  switch (action.type) {\n\n    case actions.ADD_CONTEXT:\n      return [\n        ...state,\n        action.context\n      ];\n\n    case actions.MERGE_CONTEXT:\n      let current = state[action.index];\n\n      return [\n        ...state.slice(0, action.index),\n        merge(current, action.context),\n        ...state.slice(action.index + 1)\n      ]\n\n    default:\n      return state;\n  }\n}\n\nexport function indexForBinary(state = {}, action) {\n  switch (action.type) {\n\n    case actions.ADD_CONTEXT:\n      let index = Object.keys(state).length; // new context, new index\n      let binary = action.context.binary;\n      debug(\"binary: %o\", binary);\n\n      // (just because this is the sort of thing to come back to bite us)\n      assert(state[binary] == undefined);\n\n      return {\n        ...state,\n        [binary]: index\n      }\n\n    default:\n      return state;\n  }\n}\n\nexport function indexForAddress(state = {_next: 0}, action) {\n  switch (action.type) {\n\n    case actions.ADD_CONTEXT:\n      let index = state._next;\n      debug(\"adding context to address index: %o\", action);\n\n      return {\n        ...state,\n\n        // track the # of contexts because this is a separate reducer\n        _next: state._next + 1,\n\n        ...Object.assign({},\n          ...action.context.addresses.map(\n            (address) => ({ [address]: index })\n          )\n        )\n      };\n\n    case actions.MERGE_CONTEXT:\n      debug(\"merging context into address index: %o\", action);\n      debug(\"action.context.addresses: %o\", action.context.addresses);\n\n      return {\n        ...state,\n\n        ...Object.assign({},\n          ...action.context.addresses.map(\n            (address) => ({ [address]: action.index })\n          )\n        )\n      };\n\n    default:\n      return state;\n  }\n\n}\n\n\nconst reducer = combineReducers({\n  list,\n  indexForAddress,\n  indexForBinary,\n});\n\nexport default reducer;\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/context/reducers.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 75,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/context/reducers.js",
    "static": true,
    "longname": "lib/context/reducers.js~debug",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/context/reducers.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 76,
    "kind": "function",
    "name": "merge",
    "memberof": "lib/context/reducers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/context/reducers.js~merge",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/context/reducers.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "context",
        "types": [
          "*"
        ]
      },
      {
        "name": "others",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "{\"binary\": *, \"addresses\": *, \"ast\": *, \"sourceMap\": *, \"source\": *, \"sourcePath\": *, \"contractName\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 77,
    "kind": "function",
    "name": "list",
    "memberof": "lib/context/reducers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/context/reducers.js~list",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/context/reducers.js",
    "importStyle": "{list}",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      },
      {
        "name": "action",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "function",
    "name": "indexForBinary",
    "memberof": "lib/context/reducers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/context/reducers.js~indexForBinary",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/context/reducers.js",
    "importStyle": "{indexForBinary}",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "action",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "function",
    "name": "indexForAddress",
    "memberof": "lib/context/reducers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/context/reducers.js~indexForAddress",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/context/reducers.js",
    "importStyle": "{indexForAddress}",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "optional": true,
        "types": [
          "{\"_next\": number}"
        ],
        "defaultRaw": {
          "_next": 0
        },
        "defaultValue": "{\"_next\":0}"
      },
      {
        "name": "action",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "variable",
    "name": "reducer",
    "memberof": "lib/context/reducers.js",
    "static": true,
    "longname": "lib/context/reducers.js~reducer",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/context/reducers.js",
    "importStyle": "reducer",
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "file",
    "name": "lib/context/sagas/index.js",
    "content": "import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:context:sagas\");\n\nimport { put, select } from 'redux-saga/effects';\n\nimport * as actions from \"../actions\";\nimport context from \"../selectors\";\n\nexport function *addOrMerge(newContext) {\n  let binaryIndexes = yield select(context.indexBy.binary);\n\n  let index = binaryIndexes(newContext.binary);\n  if (index !== undefined) {\n    // existing context, merge\n    yield put(actions.mergeContext(index, newContext))\n\n  } else {\n    // new\n    yield put(actions.addContext(newContext));\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/context/sagas/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 82,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/context/sagas/index.js",
    "static": true,
    "longname": "lib/context/sagas/index.js~debug",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/context/sagas/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 83,
    "kind": "function",
    "name": "addOrMerge",
    "memberof": "lib/context/sagas/index.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/context/sagas/index.js~addOrMerge",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/context/sagas/index.js",
    "importStyle": "{addOrMerge}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "newContext",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 84,
    "kind": "file",
    "name": "lib/context/selectors/index.js",
    "content": "import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:context:selectors\");\n\nimport { createSelectorTree, createLeaf } from \"reselect-tree\";\n\nimport evm from \"lib/evm/selectors\";\n\nconst WORD_SIZE = 0x20;\n\nconst contexts = (state) => {\n  const defaultView = {\n    list: [],\n    indexForAddress: {},\n    indexForBinary: {}\n  };\n\n  return state.context || defaultView;\n};\n\nconst context = createSelectorTree({\n  /**\n   * context.list\n   *\n   * list of all contexts\n   */\n  list: createLeaf([contexts], (contexts) => contexts.list),\n\n  /**\n   * context.by\n   */\n  by: {\n\n    /**\n     * context.by.address\n     *\n     * object (address => context)\n     */\n    address: createLeaf(\n      [contexts, \"../indexBy/address\"],\n\n      (contexts, contextIndexBy) => (\n        (address) => contexts && contexts.list[ contextIndexBy(address) ]\n      )\n    ),\n\n    /**\n     * context.by.binary\n     *\n     * object (binary => context)\n     */\n    binary: createLeaf(\n      [contexts, \"../indexBy/binary\"],\n\n      (contexts, contextIndexBy) => (\n        (binary) => contexts && contexts.list[ contextIndexBy(binary) ]\n      )\n    )\n  },\n\n  /**\n   * context.indexBy\n   */\n  indexBy: {\n\n    /**\n     * context.indexBy.address\n     *\n     * object (address => context list index)\n     */\n    address: createLeaf(\n      [contexts],\n\n      (contexts) => (\n        (address) => {\n          const { _next, ...map } = contexts.indexForAddress;\n          return map[address];\n        }\n      )\n    ),\n\n    /**\n     * context.indexBy.binary\n     *\n     * object (binary => context list index)\n     */\n    binary: createLeaf(\n      [contexts],\n\n      (contexts) => (\n        (binary) => {\n          // trim off possible constructor args, one word at a time\n          // HACK until there's better CREATE semantics\n          let index = undefined;\n          while (index === undefined && binary) {\n            index = contexts.indexForBinary[binary];\n            binary = binary.slice(0, -(WORD_SIZE * 2));\n          }\n\n          return index;\n        }\n      )\n    )\n  },\n\n  /**\n   * context.current\n   */\n  current: createLeaf(\n    [evm.current.call, \"./by\"],\n\n    ({address, binary}, contextBy) => {\n      if (address) {\n        return contextBy.address(address);\n      } else {\n        return contextBy.binary(binary);\n      }\n    }\n  ),\n\n  /**\n   * context.affectedInstances\n   *\n   * contexts interacted with in trace\n   */\n  affectedInstances: createLeaf(\n    [contexts],\n\n    ({list, indexForAddress}) => {\n      let map = {};\n\n      for (let address of Object.keys(indexForAddress)) {\n        if (address === \"_next\") continue;\n\n        let index = indexForAddress[address];\n        let context = list[index];\n\n        map[address] = {\n          contractName: context.contractName,\n          source: context.source,\n          binary: context.binary\n        };\n      }\n\n      return map;\n    }\n  ),\n\n  /**\n   * context.missingSources\n   *\n   * contexts without source defined\n   */\n  missingSources: createLeaf(\n    ['./affectedInstances'],\n\n    (instances) => Object.entries(instances)\n      .filter(([address, instance]) => !instance.source)\n      .map(([address, instance]) => address)\n  )\n});\n\nexport default context;\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/context/selectors/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 85,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/context/selectors/index.js",
    "static": true,
    "longname": "lib/context/selectors/index.js~debug",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/context/selectors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 86,
    "kind": "variable",
    "name": "WORD_SIZE",
    "memberof": "lib/context/selectors/index.js",
    "static": true,
    "longname": "lib/context/selectors/index.js~WORD_SIZE",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/context/selectors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 87,
    "kind": "function",
    "name": "contexts",
    "memberof": "lib/context/selectors/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/context/selectors/index.js~contexts",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/context/selectors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 88,
    "kind": "variable",
    "name": "context",
    "memberof": "lib/context/selectors/index.js",
    "static": true,
    "longname": "lib/context/selectors/index.js~context",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/context/selectors/index.js",
    "importStyle": "context",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "file",
    "name": "lib/controller/actions/index.js",
    "content": "export const BEGIN_STEP = \"BEGIN_STEP\";\nexport function beginStep(type) {\n  return {\n    type: BEGIN_STEP,\n    stepType: type\n  };\n}\n\nexport const ADVANCE = \"ADVANCE\";\nexport function advance() {\n  return {type: ADVANCE};\n}\n\nexport const STEP_NEXT = \"STEP_NEXT\";\nexport function stepNext() {\n  return {type: STEP_NEXT};\n}\n\nexport const STEP_OVER = \"STEP_OVER\";\nexport function stepOver() {\n  return {type: STEP_OVER};\n}\n\nexport const STEP_INTO = \"STEP_INTO\";\nexport function stepInto() {\n  return {type: STEP_INTO};\n}\n\nexport const STEP_OUT = \"STEP_OUT\";\nexport function stepOut() {\n  return {type: STEP_OUT};\n}\n\nexport const INTERRUPT = \"INTERRUPT\";\nexport function interrupt () {\n  return {type: INTERRUPT};\n}\n\n\nexport const CONTINUE_UNTIL = \"CONTINUE_UNTIL\";\nexport function continueUntil(...breakpoints) {\n  return {\n    type: CONTINUE_UNTIL,\n    breakpoints\n  };\n}\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/controller/actions/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 90,
    "kind": "variable",
    "name": "BEGIN_STEP",
    "memberof": "lib/controller/actions/index.js",
    "static": true,
    "longname": "lib/controller/actions/index.js~BEGIN_STEP",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/controller/actions/index.js",
    "importStyle": "{BEGIN_STEP}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "function",
    "name": "beginStep",
    "memberof": "lib/controller/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/controller/actions/index.js~beginStep",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/controller/actions/index.js",
    "importStyle": "{beginStep}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"stepType\": *}"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "variable",
    "name": "ADVANCE",
    "memberof": "lib/controller/actions/index.js",
    "static": true,
    "longname": "lib/controller/actions/index.js~ADVANCE",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/controller/actions/index.js",
    "importStyle": "{ADVANCE}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "function",
    "name": "advance",
    "memberof": "lib/controller/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/controller/actions/index.js~advance",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/controller/actions/index.js",
    "importStyle": "{advance}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"type\": *}"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "variable",
    "name": "STEP_NEXT",
    "memberof": "lib/controller/actions/index.js",
    "static": true,
    "longname": "lib/controller/actions/index.js~STEP_NEXT",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/controller/actions/index.js",
    "importStyle": "{STEP_NEXT}",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "function",
    "name": "stepNext",
    "memberof": "lib/controller/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/controller/actions/index.js~stepNext",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/controller/actions/index.js",
    "importStyle": "{stepNext}",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"type\": *}"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "variable",
    "name": "STEP_OVER",
    "memberof": "lib/controller/actions/index.js",
    "static": true,
    "longname": "lib/controller/actions/index.js~STEP_OVER",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/controller/actions/index.js",
    "importStyle": "{STEP_OVER}",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "function",
    "name": "stepOver",
    "memberof": "lib/controller/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/controller/actions/index.js~stepOver",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/controller/actions/index.js",
    "importStyle": "{stepOver}",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"type\": *}"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "variable",
    "name": "STEP_INTO",
    "memberof": "lib/controller/actions/index.js",
    "static": true,
    "longname": "lib/controller/actions/index.js~STEP_INTO",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/controller/actions/index.js",
    "importStyle": "{STEP_INTO}",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "function",
    "name": "stepInto",
    "memberof": "lib/controller/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/controller/actions/index.js~stepInto",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/controller/actions/index.js",
    "importStyle": "{stepInto}",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"type\": *}"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "variable",
    "name": "STEP_OUT",
    "memberof": "lib/controller/actions/index.js",
    "static": true,
    "longname": "lib/controller/actions/index.js~STEP_OUT",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/controller/actions/index.js",
    "importStyle": "{STEP_OUT}",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "function",
    "name": "stepOut",
    "memberof": "lib/controller/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/controller/actions/index.js~stepOut",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/controller/actions/index.js",
    "importStyle": "{stepOut}",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"type\": *}"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "variable",
    "name": "INTERRUPT",
    "memberof": "lib/controller/actions/index.js",
    "static": true,
    "longname": "lib/controller/actions/index.js~INTERRUPT",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/controller/actions/index.js",
    "importStyle": "{INTERRUPT}",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "function",
    "name": "interrupt",
    "memberof": "lib/controller/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/controller/actions/index.js~interrupt",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/controller/actions/index.js",
    "importStyle": "{interrupt}",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"type\": *}"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "variable",
    "name": "CONTINUE_UNTIL",
    "memberof": "lib/controller/actions/index.js",
    "static": true,
    "longname": "lib/controller/actions/index.js~CONTINUE_UNTIL",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/controller/actions/index.js",
    "importStyle": "{CONTINUE_UNTIL}",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 105,
    "kind": "function",
    "name": "continueUntil",
    "memberof": "lib/controller/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/controller/actions/index.js~continueUntil",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/controller/actions/index.js",
    "importStyle": "{continueUntil}",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "breakpoints",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"breakpoints\": *}"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "file",
    "name": "lib/controller/sagas/index.js",
    "content": "import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:controller:sagas\");\n\nimport { put, call, race, take, select } from 'redux-saga/effects';\n\nimport { prefixName } from \"lib/helpers\";\n\nimport * as trace from \"lib/trace/sagas\";\n\nimport * as actions from \"../actions\";\n\nimport controller from \"../selectors\";\n\nconst controlSagas = {\n  [actions.ADVANCE]: advance,\n  [actions.STEP_NEXT]: stepNext,\n  [actions.STEP_OVER]: stepOver,\n  [actions.STEP_INTO]: stepInto,\n  [actions.STEP_OUT]: stepOut,\n  [actions.CONTINUE_UNTIL]: continueUntil\n};\n\nexport function* saga() {\n  while (true) {\n    debug(\"waiting for control action\");\n    let action = yield take(Object.keys(controlSagas));\n    debug(\"got control action\");\n    let saga = controlSagas[action.type];\n\n    yield put(actions.beginStep(action.type));\n\n    yield race({\n      exec: call(saga, action),\n      interrupt: take(actions.INTERRUPT)\n    });\n  }\n}\n\nexport default prefixName(\"controller\", saga);\n\n/**\n * Advance the state by one instruction\n */\nfunction* advance() {\n  // send action to advance trace\n  yield *trace.advance();\n}\n\n/**\n * stepNext - step to the next logical code segment\n *\n * Note: It might take multiple instructions to express the same section of code.\n * \"Stepping\", then, is stepping to the next logical item, not stepping to the next\n * instruction. See advance() if you'd like to advance by one instruction.\n */\nfunction* stepNext () {\n  const startingRange = yield select(controller.next.location.sourceRange);\n\n  var next;\n\n  do {\n    // advance at least once step\n    yield* advance();\n\n    // and check the next source range\n    next = yield select(controller.next.location);\n\n    // if the next step's source range is still the same, keep going\n  } while (\n    // HACK - just skip over ContractDefinition nodes\n    next.node.nodeType == \"ContractDefinition\" ||\n\n    next.sourceRange.start == startingRange.start &&\n    next.sourceRange.length == startingRange.length\n  );\n}\n\n/**\n * stepInto - step into the current function\n *\n * Conceptually this is easy, but from a programming standpoint it's hard.\n * Code like `getBalance(msg.sender)` might be highlighted, but there could\n * be a number of different intermediate steps (like evaluating `msg.sender`)\n * before `getBalance` is stepped into. This function will step into the first\n * function available (where instruction.jump == \"i\"), ignoring any intermediate\n * steps that fall within the same code range. If there's a step encountered\n * that exists outside of the range, then stepInto will only execute until that\n * step.\n */\nfunction* stepInto () {\n  if (yield select(controller.next.willJump)) {\n    yield* stepNext();\n\n    return;\n  }\n\n  if (yield select(controller.next.location.isMultiline)) {\n    yield* stepOver();\n\n    return;\n  }\n\n  const startingDepth = yield select(controller.current.functionDepth);\n  const startingRange = yield select(controller.next.location.sourceRange);\n  var currentDepth;\n  var nextRange;\n\n  do {\n    yield* stepNext();\n\n    currentDepth = yield select(controller.current.functionDepth);\n    nextRange = yield select(controller.next.location.sourceRange);\n\n  } while (\n    // the function stack has not increased,\n    currentDepth <= startingDepth &&\n\n    // the next source range begins on or after the starting range\n    nextRange.start >= startingRange.start &&\n\n    // and the next range ends on or before the starting range ends\n    (nextRange.start + nextRange.length) <=\n      (startingRange.start + startingRange.length)\n  );\n}\n\n/**\n * Step out of the current function\n *\n * This will run until the debugger encounters a decrease in function depth.\n */\nfunction* stepOut () {\n  if (yield select(controller.next.location.isMultiline)) {\n    yield *stepOver();\n\n    return;\n  }\n\n  const startingDepth = yield select(controller.current.functionDepth);\n  var currentDepth;\n\n  do {\n    yield* stepNext();\n\n    currentDepth = yield select(controller.current.functionDepth);\n\n  } while(currentDepth >= startingDepth);\n}\n\n/**\n * stepOver - step over the current line\n *\n * Step over the current line. This will step to the next instruction that\n * exists on a different line of code within the same function depth.\n */\nfunction* stepOver () {\n  const startingDepth = yield select(controller.current.functionDepth);\n  const startingRange = yield select(controller.next.location.sourceRange);\n  var currentDepth;\n  var nextRange;\n\n  do {\n    yield* stepNext();\n\n    currentDepth = yield select(controller.current.functionDepth);\n    nextRange = yield select(controller.next.location.sourceRange);\n\n  } while (\n    // keep stepping provided:\n    //\n    // we haven't jumped out\n    !(currentDepth < startingDepth) &&\n\n    // either: function depth is greater than starting (ignore function calls)\n    // or, if we're at the same depth, keep stepping until we're on a new\n    // line.\n    (currentDepth > startingDepth ||\n      nextRange.lines.start.line == startingRange.lines.start.line)\n  )\n}\n\n/**\n * continueUntil - step through execution until a breakpoint\n *\n * @param breakpoints - array of breakpoints ({ ...call, line })\n */\nfunction *continueUntil ({breakpoints}) {\n  var currentCall;\n  var next;\n\n  let breakpointHit = false;\n\n  do {\n    yield* stepNext();\n\n    currentCall = yield select(controller.current.executionContext);\n    next = yield select(controller.next.location);\n\n    breakpointHit = breakpoints\n      .filter( ({address, binary, line, node}) =>\n        (address == currentCall.address || binary == currentCall.binary) &&\n        (line == next.sourceRange.lines.start.line || node == next.node.id)\n      )\n      .length > 0;\n\n  } while (!breakpointHit);\n}\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/controller/sagas/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 107,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/controller/sagas/index.js",
    "static": true,
    "longname": "lib/controller/sagas/index.js~debug",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/controller/sagas/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 108,
    "kind": "variable",
    "name": "controlSagas",
    "memberof": "lib/controller/sagas/index.js",
    "static": true,
    "longname": "lib/controller/sagas/index.js~controlSagas",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/controller/sagas/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "{\"undefined\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 109,
    "kind": "function",
    "name": "saga",
    "memberof": "lib/controller/sagas/index.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/controller/sagas/index.js~saga",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/controller/sagas/index.js",
    "importStyle": "{saga}",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 110,
    "kind": "function",
    "name": "advance",
    "memberof": "lib/controller/sagas/index.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/controller/sagas/index.js~advance",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/controller/sagas/index.js",
    "importStyle": null,
    "description": "Advance the state by one instruction",
    "lineNumber": 44,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 111,
    "kind": "function",
    "name": "stepNext",
    "memberof": "lib/controller/sagas/index.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/controller/sagas/index.js~stepNext",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/controller/sagas/index.js",
    "importStyle": null,
    "description": "stepNext - step to the next logical code segment\n\nNote: It might take multiple instructions to express the same section of code.\n\"Stepping\", then, is stepping to the next logical item, not stepping to the next\ninstruction. See advance() if you'd like to advance by one instruction.",
    "lineNumber": 56,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 112,
    "kind": "function",
    "name": "stepInto",
    "memberof": "lib/controller/sagas/index.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/controller/sagas/index.js~stepInto",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/controller/sagas/index.js",
    "importStyle": null,
    "description": "stepInto - step into the current function\n\nConceptually this is easy, but from a programming standpoint it's hard.\nCode like `getBalance(msg.sender)` might be highlighted, but there could\nbe a number of different intermediate steps (like evaluating `msg.sender`)\nbefore `getBalance` is stepped into. This function will step into the first\nfunction available (where instruction.jump == \"i\"), ignoring any intermediate\nsteps that fall within the same code range. If there's a step encountered\nthat exists outside of the range, then stepInto will only execute until that\nstep.",
    "lineNumber": 90,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 113,
    "kind": "function",
    "name": "stepOut",
    "memberof": "lib/controller/sagas/index.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/controller/sagas/index.js~stepOut",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/controller/sagas/index.js",
    "importStyle": null,
    "description": "Step out of the current function\n\nThis will run until the debugger encounters a decrease in function depth.",
    "lineNumber": 132,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 114,
    "kind": "function",
    "name": "stepOver",
    "memberof": "lib/controller/sagas/index.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/controller/sagas/index.js~stepOver",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/controller/sagas/index.js",
    "importStyle": null,
    "description": "stepOver - step over the current line\n\nStep over the current line. This will step to the next instruction that\nexists on a different line of code within the same function depth.",
    "lineNumber": 156,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 115,
    "kind": "function",
    "name": "continueUntil",
    "memberof": "lib/controller/sagas/index.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/controller/sagas/index.js~continueUntil",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/controller/sagas/index.js",
    "importStyle": null,
    "description": "continueUntil - step through execution until a breakpoint",
    "lineNumber": 187,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "breakpoints",
        "description": "array of breakpoints ({ ...call, line })"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 116,
    "kind": "file",
    "name": "lib/controller/selectors/index.js",
    "content": "import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:controller:sagas\");\n\nimport { createSelectorTree, createLeaf } from \"reselect-tree\";\n\nimport evm from \"lib/evm/selectors\";\nimport solidity from \"lib/solidity/selectors\";\nimport ast from \"lib/ast/selectors\";\n\n/**\n * @private\n */\nconst identity = (x) => x\n\n/**\n * controller\n */\nconst controller = createSelectorTree({\n\n  /**\n   * controller.current\n   */\n  current: {\n    /**\n     * controller.current.functionDepth\n     */\n    functionDepth: createLeaf([solidity.current.functionDepth], identity),\n\n    /**\n     * controller.current.executionContext\n     */\n    executionContext: createLeaf([evm.current.call], identity)\n  },\n\n  /**\n   * controller.next\n   */\n  next: {\n\n    /**\n     * controller.next.willJump\n     */\n    willJump: createLeaf([evm.next.step.isJump], identity),\n\n    /**\n     * controller.next.location\n     */\n    location: {\n      /**\n       * controller.next.location.sourceRange\n       */\n      sourceRange: createLeaf([solidity.next.sourceRange], identity),\n\n      /**\n       * controller.next.location.node\n       */\n      node: createLeaf([ast.next.node], identity),\n\n      /**\n       * controller.next.location.isMultiline\n       */\n      isMultiline: createLeaf([solidity.next.isMultiline], identity),\n    }\n  }\n});\n\nexport default controller;\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/controller/selectors/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 117,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/controller/selectors/index.js",
    "static": true,
    "longname": "lib/controller/selectors/index.js~debug",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/controller/selectors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 118,
    "kind": "function",
    "name": "identity",
    "memberof": "lib/controller/selectors/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/controller/selectors/index.js~identity",
    "access": "private",
    "export": false,
    "importPath": "truffle-debugger/lib/controller/selectors/index.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 13,
    "ignore": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 119,
    "kind": "variable",
    "name": "controller",
    "memberof": "lib/controller/selectors/index.js",
    "static": true,
    "longname": "lib/controller/selectors/index.js~controller",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/controller/selectors/index.js",
    "importStyle": "controller",
    "description": "controller",
    "lineNumber": 18,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "file",
    "name": "lib/data/actions/index.js",
    "content": "export const SCOPE = \"SCOPE\";\nexport function scope(context, id, pointer, parentId = null) {\n  return {\n    type: SCOPE,\n    context, id, pointer, parentId\n  }\n}\n\nexport const DECLARE = \"DECLARE_VARIABLE\";\nexport function declare(context, node) {\n  return {\n    type: DECLARE,\n    context, node\n  }\n}\n\nexport const ASSIGN = \"ASSIGN\";\nexport function assign(context, assignments) {\n  return {\n    type: ASSIGN,\n    context, assignments\n  };\n}\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/data/actions/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 121,
    "kind": "variable",
    "name": "SCOPE",
    "memberof": "lib/data/actions/index.js",
    "static": true,
    "longname": "lib/data/actions/index.js~SCOPE",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/data/actions/index.js",
    "importStyle": "{SCOPE}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "function",
    "name": "scope",
    "memberof": "lib/data/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/data/actions/index.js~scope",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/data/actions/index.js",
    "importStyle": "{scope}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "context",
        "types": [
          "*"
        ]
      },
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "pointer",
        "types": [
          "*"
        ]
      },
      {
        "name": "parentId",
        "optional": true,
        "types": [
          "undefined"
        ],
        "defaultValue": "undefined"
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"context\": *, \"id\": *, \"pointer\": *, \"parentId\": *}"
      ]
    }
  },
  {
    "__docId__": 123,
    "kind": "variable",
    "name": "DECLARE",
    "memberof": "lib/data/actions/index.js",
    "static": true,
    "longname": "lib/data/actions/index.js~DECLARE",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/data/actions/index.js",
    "importStyle": "{DECLARE}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 124,
    "kind": "function",
    "name": "declare",
    "memberof": "lib/data/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/data/actions/index.js~declare",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/data/actions/index.js",
    "importStyle": "{declare}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "context",
        "types": [
          "*"
        ]
      },
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"context\": *, \"node\": *}"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "variable",
    "name": "ASSIGN",
    "memberof": "lib/data/actions/index.js",
    "static": true,
    "longname": "lib/data/actions/index.js~ASSIGN",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/data/actions/index.js",
    "importStyle": "{ASSIGN}",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "function",
    "name": "assign",
    "memberof": "lib/data/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/data/actions/index.js~assign",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/data/actions/index.js",
    "importStyle": "{assign}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "context",
        "types": [
          "*"
        ]
      },
      {
        "name": "assignments",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"context\": *, \"assignments\": *}"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "file",
    "name": "lib/data/decode/index.js",
    "content": "import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:data:decode\");\n\nimport {BigNumber} from \"bignumber.js\";\n\nimport * as memory from \"./memory\";\nimport * as storage from \"./storage\";\nimport * as utils from \"./utils\";\nimport { WORD_SIZE } from \"./utils\";\n\nexport function read(pointer, state) {\n  if (pointer.stack != undefined && state.stack && pointer.stack < state.stack.length) {\n    return state.stack[pointer.stack];\n  } else if (pointer.storage != undefined && state.storage) {\n    return storage.readRange(state.storage, pointer.storage);\n  } else if (pointer.memory != undefined && state.memory) {\n    return memory.readBytes(state.memory, pointer.memory.start, pointer.memory.length);\n  } else if (pointer.literal) {\n    return pointer.literal;\n  }\n}\n\n\nexport function decodeValue(definition, pointer, state, ...args) {\n  let bytes = read(pointer, state);\n  if (!bytes) {\n    return undefined;\n  }\n\n  switch (utils.typeClass(definition)) {\n    case \"bool\":\n      return !utils.toBigNumber(bytes).isZero();\n\n    case \"uint\":\n      return utils.toBigNumber(bytes);\n\n    case \"int\":\n      return utils.toSignedBigNumber(bytes);\n\n    case \"address\":\n      return utils.toHexString(bytes, true);\n\n    case \"string\":\n      return String.fromCharCode.apply(null, bytes);\n\n    default:\n      debug(\"Unknown value type: %s\", utils.typeIdentifier(definition));\n      return null;\n  }\n}\n\nexport function decodeMemoryReference(definition, pointer, state, ...args) {\n  let rawValue = utils.toBigNumber(read(pointer, state)).toNumber();\n\n  var bytes;\n  switch (utils.typeClass(definition)) {\n\n    case \"string\":\n      bytes = read({\n        memory: { start: rawValue, length: WORD_SIZE}\n      }, state); // bytes contain length\n\n      return decodeValue(definition, {\n        memory: { start: rawValue + WORD_SIZE, length: bytes }\n      }, state, ...args);\n\n    case \"array\":\n      bytes = utils.toBigNumber(read({\n        memory: { start: rawValue, length: WORD_SIZE },\n      }, state)).toNumber();  // bytes contain array length\n\n      bytes = read({ memory: {\n        start: rawValue + WORD_SIZE, length: bytes * WORD_SIZE\n      }}, state); // now bytes contain items\n\n      return memory.chunk(bytes, WORD_SIZE)\n        .map(\n          (chunk) => decode(utils.baseDefinition(definition), {\n            literal: chunk\n          }, state, ...args)\n        )\n\n    case \"struct\":\n      let [refs] = args;\n      let structDefinition = refs[definition.typeName.referencedDeclaration];\n      let structVariables = structDefinition.variables || [];\n\n      return Object.assign(\n        {}, ...structVariables\n          .map(\n            ({name, id}, i) => {\n              let memberDefinition = refs[id].definition;\n              let memberPointer = {\n                memory: { start: rawValue + i * WORD_SIZE, length: WORD_SIZE }\n              };\n              // let memberPointer = memory.read(state.memory, pointer + i * WORD_SIZE);\n\n              // HACK\n              memberDefinition = {\n                ...memberDefinition,\n\n                typeDescriptions: {\n                  ...memberDefinition.typeDescriptions,\n\n                  typeIdentifier:\n                    memberDefinition.typeDescriptions.typeIdentifier\n                      .replace(/_storage_/g, \"_memory_\")\n                }\n              };\n\n              return {\n                [name]: decode(\n                  memberDefinition, memberPointer, state, ...args\n                )\n              };\n            }\n          )\n      );\n\n\n    default:\n      debug(\"Unknown memory reference type: %s\", utils.typeIdentifier(definition));\n      return null;\n\n  }\n\n}\n\nexport function decodeStorageReference(definition, pointer, state, ...args) {\n  var data;\n  var bytes;\n  var length;\n  var slot;\n\n  switch (utils.typeClass(definition)) {\n    case \"array\":\n      debug(\"storage array! %o\", pointer);\n      data = read(pointer, state);\n      if (!data) {\n        return null;\n      }\n\n      length = utils.toBigNumber(data).toNumber();\n      debug(\"length %o\", length);\n\n      let baseSize = utils.storageSize(utils.baseDefinition(definition));\n\n      const offset = (i) => Math.floor(i * baseSize / WORD_SIZE);\n      const index = (i) => i * baseSize % WORD_SIZE;\n\n      return [...Array(length).keys()]\n        .map( (i) => {\n          debug(\"pointer: %o\", pointer);\n          let childFrom = pointer.storage.from.offset != undefined ?\n            {\n              slot: [\"0x\" + utils.toBigNumber(\n                utils.keccak256(...pointer.storage.from.slot)\n              ).plus(pointer.storage.from.offset).toString(16)],\n              offset: offset(i),\n              index: index(i)\n            } : {\n              slot: [pointer.storage.from.slot],\n              offset: offset(i),\n              index: index(i)\n            };\n          debug(\"childFrom %o: %o\", i, childFrom);\n          let lookup = read({ storage: { from: childFrom, length: baseSize }}, state);\n          debug(\"done %o\", i);\n          return childFrom;\n        })\n        .map( (childFrom) => {\n          return decode(utils.baseDefinition(definition), { storage: {\n            from: childFrom,\n            length: baseSize\n          }}, state, ...args);\n        });\n\n    case \"string\":\n      data = read(pointer, state);\n      if (!data) {\n        return null;\n      }\n\n      if (data[WORD_SIZE - 1] % 2 == 0) {\n        // string lives in word, length is last byte / 2\n        length = data[WORD_SIZE - 1] / 2;\n        if (length == 0) {\n          return \"\";\n        }\n\n        return decodeValue(definition, { storage: {\n          from: { slot: pointer.storage.from.slot, index: 0 },\n          to: { slot: pointer.storage.from.slot, index: length }\n        }}, state, ...args);\n\n      } else {\n        length = utils.toBigNumber(data).minus(1).div(2).toNumber();\n        debug(\"length %o\", length);\n\n        return decodeValue(definition, { storage: {\n          from: { slot: [pointer.storage.from.slot], index: 0 },\n          length\n        }}, state, ...args);\n      }\n\n    case \"struct\":\n      let [refs] = args;\n\n      return Object.assign(\n        {}, ...Object.entries(pointer.storage.children)\n          .map( ([id, childPointer]) => ({\n            [childPointer.name]: decode(\n              refs[id].definition, { storage: childPointer }, state, ...args\n            )\n          }))\n      );\n\n      // return Object.assign(\n      //   {}, ...structVariables\n      //     .map(\n      //       ({name, id}, i) => {\n      //         let memberDefinition = refs[id].definition;\n      //         let memberPointer = {\n      //           storage: {\n\n      //           }\n      //         };\n\n      //         // HACK\n      //         memberDefinition = {\n      //           ...memberDefinition,\n\n      //           typeDescriptions: {\n      //             ...memberDefinition.typeDescriptions,\n\n      //             typeIdentifier:\n      //               memberDefinition.typeDescriptions.typeIdentifier\n      //           }\n      //         };\n\n      //         debug(\"name %s %O\", name, memberDefinition);\n\n      //         return {\n      //           [name]: decode(\n      //             memberDefinition, memberPointer, state, ...args\n      //           )\n      //         };\n      //       }\n      //     )\n      // );\n\n    default:\n      debug(\"Unknown storage reference type: %s\", utils.typeIdentifier(definition));\n      return undefined;\n  }\n}\n\n\n\nexport default function decode(definition, ...args) {\n  if (!utils.isReference(definition)) {\n    return decodeValue(definition, ...args);\n  }\n\n  switch (utils.referenceType(definition)) {\n    case \"memory\":\n      return decodeMemoryReference(definition, ...args);\n    case \"storage\":\n      return decodeStorageReference(definition, ...args);\n    default:\n      debug(\"Unknown reference category: %s\", utils.typeIdentifier(definition));\n      return undefined;\n  }\n}\n\n// export default function decode(definition, rawValue, state, refs) {\n//   /*\n//    * if reference type:\n//    *   if memory:\n//    *\n//    * else if value type:\n//    *   decodeValue(definition, valueBytes)\n//    */\n//   var length;\n//   var bytes;\n\n//   debug(\"definition: %o %o\", definition.typeDescriptions, definition.typeName);\n//   if (definition.typeName.referencedDeclaration) {\n//     debug(\"referenced %o\", refs[definition.typeName.referencedDeclaration]);\n//   }\n\n//   let mainType = definition.typeDescriptions.typeIdentifier\n//     .match(/(t_[^$_]+)/)[0];\n\n//   switch (mainType) {\n//     case \"t_string\":\n//       debug(\"rawValue: %o\", rawValue.toNumber());\n\n//       length = memory.read(state.memory, rawValue);\n//       if (length == null) {\n//         return null;\n//       }\n//       debug(\"length: %o\", length);\n\n//       bytes = memory.readBytes(state.memory, rawValue.plus(WORD_SIZE), length);\n//       debug(\"bytes: %o\", bytes.length);\n//       return String.fromCharCode.apply(null, bytes);\n\n//     default:\n//       return rawValue.toNumber();\n//   }\n// }\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/data/decode/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 128,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/data/decode/index.js",
    "static": true,
    "longname": "lib/data/decode/index.js~debug",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/data/decode/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 129,
    "kind": "function",
    "name": "read",
    "memberof": "lib/data/decode/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/data/decode/index.js~read",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/data/decode/index.js",
    "importStyle": "{read}",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "pointer",
        "types": [
          "*"
        ]
      },
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "function",
    "name": "decodeValue",
    "memberof": "lib/data/decode/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/data/decode/index.js~decodeValue",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/data/decode/index.js",
    "importStyle": "{decodeValue}",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "definition",
        "types": [
          "*"
        ]
      },
      {
        "name": "pointer",
        "types": [
          "*"
        ]
      },
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "function",
    "name": "decodeMemoryReference",
    "memberof": "lib/data/decode/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/data/decode/index.js~decodeMemoryReference",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/data/decode/index.js",
    "importStyle": "{decodeMemoryReference}",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "definition",
        "types": [
          "*"
        ]
      },
      {
        "name": "pointer",
        "types": [
          "*"
        ]
      },
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "function",
    "name": "decodeStorageReference",
    "memberof": "lib/data/decode/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/data/decode/index.js~decodeStorageReference",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/data/decode/index.js",
    "importStyle": "{decodeStorageReference}",
    "description": null,
    "lineNumber": 129,
    "undocument": true,
    "params": [
      {
        "name": "definition",
        "types": [
          "*"
        ]
      },
      {
        "name": "pointer",
        "types": [
          "*"
        ]
      },
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "function",
    "name": "decode",
    "memberof": "lib/data/decode/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/data/decode/index.js~decode",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/data/decode/index.js",
    "importStyle": "decode",
    "description": null,
    "lineNumber": 260,
    "undocument": true,
    "params": [
      {
        "name": "definition",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "file",
    "name": "lib/data/decode/memory.js",
    "content": "import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:data:decode:memory\");\n\nimport { BigNumber } from \"bignumber.js\";\n\nimport * as utils from \"./utils\";\nimport { WORD_SIZE } from \"./utils\";\n\n/**\n * read word from memory\n *\n * requires `byte` to be a multiple of WORD_SIZE (32)\n *\n * @param memory - Uint8Array\n * @return {BigNumber}\n */\nexport function read(memory, byte) {\n  return readBytes(memory, byte, WORD_SIZE);\n}\n\n/**\n * read <bytes> amount of bytes from memory, starting at byte <start>\n *\n * @param memory - Uint8Array\n */\nexport function readBytes(memory, byte, length) {\n  byte = utils.toBigNumber(byte);\n  length = utils.toBigNumber(length);\n\n  if (byte.toNumber() >= memory.length) {\n    return new Uint8Array(length ? length.toNumber() : 0);\n  }\n\n  if (length == undefined) {\n    return new Uint8Array(memory.buffer, byte.toNumber());\n  }\n\n  // grab `length` bytes no matter what, here fill this array\n  var bytes = new Uint8Array(length.toNumber());\n\n  // if we're reading past the end of memory, truncate the length to read\n  let excess = byte.plus(length).minus(memory.length).toNumber();\n  if (excess > 0) {\n    length = new BigNumber(memory.length).minus(byte);\n  }\n\n  let existing = new Uint8Array(memory.buffer, byte.toNumber(), length.toNumber());\n\n  bytes.set(existing);\n\n  return bytes;\n}\n\n/**\n * Split memory into chunks\n */\nexport function chunk(memory, size = WORD_SIZE) {\n  let chunks = [];\n\n  for (let i = 0; i < memory.length; i += size) {\n    let chunk = readBytes(memory, i, size);\n    chunks.push(chunk);\n  }\n\n  return chunks;\n}\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/data/decode/memory.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 135,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/data/decode/memory.js",
    "static": true,
    "longname": "lib/data/decode/memory.js~debug",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/data/decode/memory.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 136,
    "kind": "function",
    "name": "read",
    "memberof": "lib/data/decode/memory.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/data/decode/memory.js~read",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/data/decode/memory.js",
    "importStyle": "{read}",
    "description": "read word from memory\n\nrequires `byte` to be a multiple of WORD_SIZE (32)",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "memory",
        "description": "Uint8Array"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigNumber"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 137,
    "kind": "function",
    "name": "readBytes",
    "memberof": "lib/data/decode/memory.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/data/decode/memory.js~readBytes",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/data/decode/memory.js",
    "importStyle": "{readBytes}",
    "description": "read <bytes> amount of bytes from memory, starting at byte <start>",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "memory",
        "description": "Uint8Array"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 138,
    "kind": "function",
    "name": "chunk",
    "memberof": "lib/data/decode/memory.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/data/decode/memory.js~chunk",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/data/decode/memory.js",
    "importStyle": "{chunk}",
    "description": "Split memory into chunks",
    "lineNumber": 57,
    "params": [
      {
        "name": "memory",
        "types": [
          "*"
        ]
      },
      {
        "name": "size",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": "WORD_SIZE",
        "defaultValue": "WORD_SIZE"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 139,
    "kind": "file",
    "name": "lib/data/decode/storage.js",
    "content": "import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:data:decode:storage\");\n\nimport { WORD_SIZE } from \"./utils\";\nimport * as utils from \"./utils\";\n\n\n/**\n * read slot from storage\n *\n * @param slot - big number or array of regular numbers\n * @param offset - for array, offset from the keccak determined location\n */\nexport function read(storage, slot, offset = 0) {\n  if (slot instanceof Array) {\n    slot = utils.keccak256(...slot.map(utils.toBigNumber));\n  }\n\n  slot = utils.toBigNumber(slot).plus(offset);\n\n  debug(\"reading slot: %o\", utils.toHexString(slot));\n\n  return storage[utils.toHexString(slot, WORD_SIZE)] ||\n    new Uint8Array(WORD_SIZE);\n}\n\n/**\n * read <bytes> amount of bytes from storage, starting at some slot\n */\nexport function readBytes(storage, slot, length, offset = 0) {\n  let data = new Uint8Array(length);\n\n  let bytesLeft = length;\n  var buffer;\n  for (let i = 0; i < length / WORD_SIZE; i++) {\n    buffer = read(storage, slot, i + offset);\n    if (bytesLeft < WORD_SIZE) {\n      buffer = buffer.slice(0, bytesLeft);\n    }\n    data.set(buffer, i * WORD_SIZE);\n    bytesLeft -= buffer.length;\n  }\n\n  return data;\n}\n\nexport function readRange(storage, {from, to, length}) {\n  debug(\"readRange %o\", Array.prototype.slice(arguments, [1]));\n  if (to != undefined) {\n    let trim = to.index - WORD_SIZE + 1;\n\n    return readBytes(\n      storage, from.slot, (to.slot - from.slot + 1) * WORD_SIZE  // round up\n    ).slice(from.index, trim < 0 ? trim : undefined);\n\n  } else {\n    return readBytes(\n      storage, from.slot, length, from.offset\n    ).slice(from.index);\n  }\n}\n\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/data/decode/storage.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 140,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/data/decode/storage.js",
    "static": true,
    "longname": "lib/data/decode/storage.js~debug",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/data/decode/storage.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 141,
    "kind": "function",
    "name": "read",
    "memberof": "lib/data/decode/storage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/data/decode/storage.js~read",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/data/decode/storage.js",
    "importStyle": "{read}",
    "description": "read slot from storage",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "slot",
        "description": "big number or array of regular numbers"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "offset",
        "description": "for array, offset from the keccak determined location"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "function",
    "name": "readBytes",
    "memberof": "lib/data/decode/storage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/data/decode/storage.js~readBytes",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/data/decode/storage.js",
    "importStyle": "{readBytes}",
    "description": "read <bytes> amount of bytes from storage, starting at some slot",
    "lineNumber": 30,
    "params": [
      {
        "name": "storage",
        "types": [
          "*"
        ]
      },
      {
        "name": "slot",
        "types": [
          "*"
        ]
      },
      {
        "name": "length",
        "types": [
          "*"
        ]
      },
      {
        "name": "offset",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0,
        "defaultValue": "0"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "function",
    "name": "readRange",
    "memberof": "lib/data/decode/storage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/data/decode/storage.js~readRange",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/data/decode/storage.js",
    "importStyle": "{readRange}",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [
      {
        "name": "storage",
        "types": [
          "*"
        ]
      },
      {
        "name": "objectPattern1",
        "types": [
          "{\"from\": *, \"to\": *, \"length\": *}"
        ],
        "defaultRaw": {
          "from": null,
          "to": null,
          "length": null
        },
        "defaultValue": "{\"from\":null,\"to\":null,\"length\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 144,
    "kind": "file",
    "name": "lib/data/decode/utils.js",
    "content": "import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:data:decode:utils\");\n\nimport { BigNumber } from \"bignumber.js\";\nimport Web3 from \"web3\";\n\nexport const WORD_SIZE = 0x20;\nexport const MAX_WORD = new BigNumber(2).pow(256).minus(1);\n\nexport function typeIdentifier(definition) {\n  return definition.typeDescriptions.typeIdentifier;\n}\n\n/**\n * returns basic type class for a variable definition node\n * e.g.:\n *  `t_uint256` becomes `uint`\n *  `t_struct$_Thing_$20_memory_ptr` becomes `struct`\n */\nexport function typeClass(definition) {\n  return typeIdentifier(definition).match(/t_([^$_0-9]+)/)[1];\n}\n\n/**\n * Allocate storage for given variable declarations\n *\n * Postcondition: starts a new slot and occupies whole slots\n */\nexport function allocateDeclarations(\n  declarations,\n  refs,\n  slot = 0,\n  index = WORD_SIZE - 1,\n  path = []\n) {\n  if (index < WORD_SIZE - 1) {  // starts a new slot\n    slot++;\n    index = WORD_SIZE - 1;\n  }\n\n  let parentFrom = { slot, index: 0 };\n  var parentTo = { slot, index: WORD_SIZE - 1 };\n  let mapping = {};\n\n  for (let declaration of declarations) {\n    let { from, to, next, children } =\n      allocateDeclaration(declaration, refs, slot, index);\n\n    mapping[declaration.id] = { from, to, children, name: declaration.name };\n\n    slot = next.slot;\n    index = next.index;\n\n    parentTo = { slot: to.slot, index: WORD_SIZE - 1 };\n  }\n\n  if (index < WORD_SIZE - 1) {\n    slot++;\n    index = WORD_SIZE - 1;\n  }\n\n  return {\n    from: parentFrom,\n    to: parentTo,\n    next: { slot, index },\n    children: mapping\n  };\n}\n\nfunction allocateValue(slot, index, bytes) {\n  let from = index - bytes + 1 >= 0 ?\n    { slot, index: index - bytes + 1 } :\n    { slot: slot + 1, index: WORD_SIZE - bytes };\n\n  let to = { slot: from.slot, index: from.index + bytes - 1 };\n\n  let next = from.index == 0 ?\n    { slot: from.slot + 1, index: WORD_SIZE - 1 } :\n    { slot: from.slot, index: from.index - 1 };\n\n  return { from, to, next };\n}\n\nfunction allocateDeclaration(declaration, refs, slot, index) {\n  let definition = refs[declaration.id].definition;\n  var byteSize = storageSize(definition);  // yum\n\n  if (typeClass(definition) != \"struct\") {\n    return allocateValue(slot, index, byteSize);\n  }\n\n  let struct = refs[definition.typeName.referencedDeclaration];\n  debug(\"struct: %O\", struct);\n\n  let result =  allocateDeclarations(struct.variables || [], refs, slot, index);\n  debug(\"struct result %o\", result);\n  return result;\n}\n\nexport function storageSize(definition) {\n  switch (typeClass(definition)) {\n    case \"bool\":\n      return 1;\n\n    case \"address\":\n      return 20;\n\n    case \"int\":\n    case \"uint\":\n      // is this a HACK? (\"256\" / 8)\n      return typeIdentifier(definition).match(/t_[a-z]+([0-9]+)/)[1] / 8;\n\n    case \"string\":\n    case \"bytes\":\n    case \"array\":\n      return WORD_SIZE;\n  }\n}\n\nexport function isReference(definition) {\n  return typeIdentifier(definition).match(/_(memory|storage)(_ptr)?$/) != null;\n}\n\nexport function referenceType(definition) {\n  return typeIdentifier(definition).match(/_([^_]+)(_ptr)?$/)[1];\n}\n\nexport function baseDefinition(definition) {\n  let baseIdentifier = typeIdentifier(definition)\n    // first dollar sign     last dollar sign\n    //   `---------.       ,---'\n    .match(/^[^$]+\\$_(.+)_\\$[^$]+$/)[1]\n    //              `----' greedy match\n\n  // HACK - internal types for memory or storage also seem to be pointers\n  if (baseIdentifier.match(/_(memory|storage)$/) != null) {\n    baseIdentifier = `${baseIdentifier}_ptr`;\n  }\n\n  // another HACK - we get away with it becausewe're only using that one property\n  return {\n    typeDescriptions: {\n      typeIdentifier: baseIdentifier\n    }\n  };\n}\n\n\nexport function toBigNumber(bytes) {\n  if (bytes == undefined) {\n    return undefined;\n  } else if (typeof bytes == \"string\") {\n    return new BigNumber(bytes, 16);\n  } else if (typeof bytes == \"number\" || BigNumber.isBigNumber(bytes)) {\n    return new BigNumber(bytes);\n  } else if (bytes.reduce) {\n    return bytes.reduce(\n      (num, byte) => num.times(0x100).plus(byte),\n      new BigNumber(0)\n    );\n  }\n}\n\nexport function toSignedBigNumber(bytes) {\n  if (bytes[0] < 0b10000000) {  // first bit is 0\n    return toBigNumber(bytes);\n  } else {\n    return toBigNumber(bytes.map( (b) => 0xff - b )).plus(1).negated();\n  }\n}\n\n/**\n * @param bytes - Uint8Array\n * @param length - desired byte length (pad with zeroes)\n * @param trim - omit leading zeroes\n */\nexport function toHexString(bytes, length = 0, trim = false) {\n  if (typeof length == \"boolean\") {\n    trim = length;\n    length = 0;\n  }\n\n  if (BigNumber.isBigNumber(bytes)) {\n    bytes = toBytes(bytes);\n  }\n\n  const pad = (s) => `${\"00\".slice(0, 2 - s.length)}${s}`\n\n  //                                          0  1  2  3  4\n  //                                 0  1  2  3  4  5  6  7\n  // bytes.length:        5  -  0x(          e5 c2 aa 09 11 )\n  // length (preferred):  8  -  0x( 00 00 00 e5 c2 aa 09 11 )\n  //                                `--.---'\n  //                                     offset 3\n  if (bytes.length < length) {\n    let prior = bytes;\n    bytes = new Uint8Array(length);\n\n    bytes.set(prior, length - prior.length);\n  }\n\n  debug(\"bytes: %o\", bytes);\n\n  let string = bytes.reduce(\n    (str, byte) => `${str}${pad(byte.toString(16))}`, \"\"\n  );\n\n  if (trim) {\n    string = string.replace(/^(00)+/, \"\");\n  }\n\n  if (string.length == 0) {\n    string = \"00\";\n  }\n\n  return `0x${string}`;\n}\n\nexport function toBytes(number, length = 0) {\n  if (number < 0) {\n    return [];\n  }\n\n  let hex = number.toString(16);\n  if (hex.length % 2 == 1) {\n    hex = `0${hex}`;\n  }\n\n  let bytes = new Uint8Array(\n    hex.match(/.{2}/g)\n      .map( (byte) => parseInt(byte, 16) )\n  );\n\n  if (bytes.length < length) {\n    let prior = bytes;\n    bytes = new Uint8Array(length);\n    bytes.set(prior, length - prior.length);\n  }\n\n  return bytes;\n}\n\nexport function keccak256(...args) {\n  let web3 = new Web3();\n\n  args = args.map( (arg) => {\n    if (typeof arg == \"number\" || BigNumber.isBigNumber(arg)) {\n      return toHexString(toBytes(arg, WORD_SIZE)).slice(2)\n    } else if (typeof arg == \"string\") {\n      return web3.toHex(arg).slice(2);\n    } else {\n      return \"\";\n    }\n  });\n\n  let sha = web3.sha3(args.join(''), { encoding: 'hex' });\n  debug(\"sha %o\", sha);\n  return toBigNumber(sha);\n}\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/data/decode/utils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 145,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/data/decode/utils.js",
    "static": true,
    "longname": "lib/data/decode/utils.js~debug",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/data/decode/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 146,
    "kind": "variable",
    "name": "WORD_SIZE",
    "memberof": "lib/data/decode/utils.js",
    "static": true,
    "longname": "lib/data/decode/utils.js~WORD_SIZE",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/data/decode/utils.js",
    "importStyle": "{WORD_SIZE}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "variable",
    "name": "MAX_WORD",
    "memberof": "lib/data/decode/utils.js",
    "static": true,
    "longname": "lib/data/decode/utils.js~MAX_WORD",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/data/decode/utils.js",
    "importStyle": "{MAX_WORD}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "function",
    "name": "typeIdentifier",
    "memberof": "lib/data/decode/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/data/decode/utils.js~typeIdentifier",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/data/decode/utils.js",
    "importStyle": "{typeIdentifier}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "definition",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "function",
    "name": "typeClass",
    "memberof": "lib/data/decode/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/data/decode/utils.js~typeClass",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/data/decode/utils.js",
    "importStyle": "{typeClass}",
    "description": "returns basic type class for a variable definition node\ne.g.:\n `t_uint256` becomes `uint`\n `t_struct$_Thing_$20_memory_ptr` becomes `struct`",
    "lineNumber": 20,
    "params": [
      {
        "name": "definition",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "function",
    "name": "allocateDeclarations",
    "memberof": "lib/data/decode/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/data/decode/utils.js~allocateDeclarations",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/data/decode/utils.js",
    "importStyle": "{allocateDeclarations}",
    "description": "Allocate storage for given variable declarations\n\nPostcondition: starts a new slot and occupies whole slots",
    "lineNumber": 29,
    "params": [
      {
        "name": "declarations",
        "types": [
          "*"
        ]
      },
      {
        "name": "refs",
        "types": [
          "*"
        ]
      },
      {
        "name": "slot",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0,
        "defaultValue": "0"
      },
      {
        "name": "index",
        "optional": true,
        "types": [
          "*"
        ]
      },
      {
        "name": "path",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      }
    ],
    "return": {
      "types": [
        "{\"from\": *, \"to\": *, \"next\": *, \"children\": *}"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "function",
    "name": "allocateValue",
    "memberof": "lib/data/decode/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/data/decode/utils.js~allocateValue",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/data/decode/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [
      {
        "name": "slot",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "bytes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"from\": *, \"to\": *, \"next\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 152,
    "kind": "function",
    "name": "allocateDeclaration",
    "memberof": "lib/data/decode/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/data/decode/utils.js~allocateDeclaration",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/data/decode/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "params": [
      {
        "name": "declaration",
        "types": [
          "*"
        ]
      },
      {
        "name": "refs",
        "types": [
          "*"
        ]
      },
      {
        "name": "slot",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 153,
    "kind": "function",
    "name": "storageSize",
    "memberof": "lib/data/decode/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/data/decode/utils.js~storageSize",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/data/decode/utils.js",
    "importStyle": "{storageSize}",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "params": [
      {
        "name": "definition",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 154,
    "kind": "function",
    "name": "isReference",
    "memberof": "lib/data/decode/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/data/decode/utils.js~isReference",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/data/decode/utils.js",
    "importStyle": "{isReference}",
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "params": [
      {
        "name": "definition",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 155,
    "kind": "function",
    "name": "referenceType",
    "memberof": "lib/data/decode/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/data/decode/utils.js~referenceType",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/data/decode/utils.js",
    "importStyle": "{referenceType}",
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "params": [
      {
        "name": "definition",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 156,
    "kind": "function",
    "name": "baseDefinition",
    "memberof": "lib/data/decode/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/data/decode/utils.js~baseDefinition",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/data/decode/utils.js",
    "importStyle": "{baseDefinition}",
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "params": [
      {
        "name": "definition",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"typeDescriptions\": *}"
      ]
    }
  },
  {
    "__docId__": 157,
    "kind": "function",
    "name": "toBigNumber",
    "memberof": "lib/data/decode/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/data/decode/utils.js~toBigNumber",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/data/decode/utils.js",
    "importStyle": "{toBigNumber}",
    "description": null,
    "lineNumber": 149,
    "undocument": true,
    "params": [
      {
        "name": "bytes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 158,
    "kind": "function",
    "name": "toSignedBigNumber",
    "memberof": "lib/data/decode/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/data/decode/utils.js~toSignedBigNumber",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/data/decode/utils.js",
    "importStyle": "{toSignedBigNumber}",
    "description": null,
    "lineNumber": 164,
    "undocument": true,
    "params": [
      {
        "name": "bytes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "function",
    "name": "toHexString",
    "memberof": "lib/data/decode/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/data/decode/utils.js~toHexString",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/data/decode/utils.js",
    "importStyle": "{toHexString}",
    "description": "",
    "lineNumber": 177,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "bytes",
        "description": "Uint8Array"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "length",
        "description": "desired byte length (pad with zeroes)"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "trim",
        "description": "omit leading zeroes"
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "function",
    "name": "toBytes",
    "memberof": "lib/data/decode/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/data/decode/utils.js~toBytes",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/data/decode/utils.js",
    "importStyle": "{toBytes}",
    "description": null,
    "lineNumber": 219,
    "undocument": true,
    "params": [
      {
        "name": "number",
        "types": [
          "*"
        ]
      },
      {
        "name": "length",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0,
        "defaultValue": "0"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 161,
    "kind": "function",
    "name": "keccak256",
    "memberof": "lib/data/decode/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/data/decode/utils.js~keccak256",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/data/decode/utils.js",
    "importStyle": "{keccak256}",
    "description": null,
    "lineNumber": 243,
    "undocument": true,
    "params": [
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 162,
    "kind": "file",
    "name": "lib/data/reducers.js",
    "content": "import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:data:reducers\");\n\nimport { combineReducers } from \"redux\";\n\nimport * as actions from \"./actions\";\n\n/*\n * state shape\n * -----------\n *\n *  data: {\n *    [context-id]: {\n *      [scope-id]: {\n *        pointer: \"/json/pointer\",\n *        variables: {\n *          name: <name>,\n *          id: <id>,\n *        }\n *      },\n *\n *      [var-id]: {\n *        pointer: \"/json/pointer\",\n *        ref: { [segment]: [location] }\n *      }\n *    }\n *  }\n */\n\nexport default function reducer(state = {}, action) {\n  var context;\n  var scope;\n  var variables;\n\n  switch (action.type) {\n    case actions.SCOPE:\n      context = state[action.context] || {};\n      scope = context[action.id] || {};\n\n      return {\n        ...state,\n\n        [action.context]: {\n          ...context,\n\n          [action.id]: {\n            ...scope,\n\n            parentId: action.parentId,\n            pointer: action.pointer\n          }\n        }\n      }\n\n    case actions.DECLARE:\n      context = state[action.context] || {};\n      scope = context[action.node.scope] || {};\n      variables = scope.variables || [];\n\n      return {\n        ...state,\n\n        [action.context]: {\n          ...context,\n\n          [action.node.scope]: {\n            ...scope,\n\n            variables: [\n              ...variables,\n\n              {name: action.node.name, id: action.node.id}\n            ]\n          }\n        }\n      }\n\n    case actions.ASSIGN:\n      context = state[action.context] || {};\n      let nodes = Object.assign(\n        {}, ...Object.entries(action.assignments).map( ([id]) => ({ [id]: context[id] }))\n      );\n\n      return {\n        ...state,\n\n        [action.context]: {\n          ...context,\n\n          ...Object.assign(\n            {}, ...Object.entries(action.assignments).map( ([id, ref]) => ({\n              [id]: {\n                ...context[id],\n                ref\n              }\n            }))\n          )\n        }\n      };\n\n    default:\n      return state;\n  }\n};\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/data/reducers.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 163,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/data/reducers.js",
    "static": true,
    "longname": "lib/data/reducers.js~debug",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/data/reducers.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 164,
    "kind": "function",
    "name": "reducer",
    "memberof": "lib/data/reducers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/data/reducers.js~reducer",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/data/reducers.js",
    "importStyle": "reducer",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "action",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 165,
    "kind": "file",
    "name": "lib/data/sagas/index.js",
    "content": "import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:data:sagas\");\n\nimport { put, takeEvery, select } from \"redux-saga/effects\";\nimport jsonpointer from \"json-pointer\";\n\nimport { prefixName } from \"lib/helpers\";\n\nimport { TICK } from \"lib/trace/actions\";\nimport * as actions from \"../actions\";\n\nimport data from \"../selectors\";\n\nimport { WORD_SIZE } from \"lib/data/decode/utils\";\nimport * as utils from \"lib/data/decode/utils\";\n\nexport function *scope(context, nodeId, pointer, parentId) {\n  yield put(actions.scope(context, nodeId, pointer, parentId));\n}\n\nexport function *declare(context, node) {\n  yield put(actions.declare(context, node));\n}\n\nfunction *tickSaga() {\n  let {tree, id: treeId} = yield select(data.views.ast.current);\n  let {node, pointer} = yield select(data.views.ast.next);\n  let scopes = yield select(data.scopes.tables.current);\n  let definitions = yield select(data.scopes.tables.inlined.current);\n\n  let stack = yield select(data.current.stack);\n  if (!stack) {\n    return;\n  }\n\n  let top = stack.length - 1;\n  var parameters, returnParameters, assignments, storageVars;\n\n  switch (node.nodeType) {\n\n    case \"FunctionDefinition\":\n      parameters = node.parameters.parameters\n        .map( (p, i) => `${pointer}/parameters/parameters/${i}` );\n\n      returnParameters = node.returnParameters.parameters\n        .map( (p, i) => `${pointer}/returnParameters/parameters/${i}` );\n\n      assignments = returnParameters.concat(parameters).reverse()\n        .map( (pointer) => jsonpointer.get(tree, pointer).id )\n        .map( (id, i) => ({ [id]: {\"stack\": top - i} }) )\n        .reduce( (acc, assignment) => Object.assign(acc, assignment), {} );\n\n      yield put(actions.assign(treeId, assignments));\n      break;\n\n    case \"ContractDefinition\":\n      let storageVars = scopes[node.id].variables || [];\n      let slot = 0;\n      let index = WORD_SIZE - 1;  // cause lower-order\n      debug(\"storage vars %o\", storageVars);\n\n      let allocation = utils.allocateDeclarations(storageVars, definitions);\n      assignments = Object.assign(\n        {}, ...Object.entries(allocation.children)\n          .map( ([id, storage]) => ({ [id]: {storage} }) )\n      );\n      debug(\"assignments %O\", assignments);\n\n      yield put(actions.assign(treeId, assignments));\n      break;\n\n    case \"VariableDeclaration\":\n      yield put(actions.assign(treeId, {\n        [jsonpointer.get(tree, pointer).id]: {\"stack\": top}\n      }));\n\n    default:\n      break;\n  }\n}\n\nexport function* saga () {\n  yield takeEvery(TICK, tickSaga);\n}\n\nexport default prefixName(\"data\", saga);\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/data/sagas/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 166,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/data/sagas/index.js",
    "static": true,
    "longname": "lib/data/sagas/index.js~debug",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/data/sagas/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 167,
    "kind": "function",
    "name": "scope",
    "memberof": "lib/data/sagas/index.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/data/sagas/index.js~scope",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/data/sagas/index.js",
    "importStyle": "{scope}",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "context",
        "types": [
          "*"
        ]
      },
      {
        "name": "nodeId",
        "types": [
          "*"
        ]
      },
      {
        "name": "pointer",
        "types": [
          "*"
        ]
      },
      {
        "name": "parentId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 168,
    "kind": "function",
    "name": "declare",
    "memberof": "lib/data/sagas/index.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/data/sagas/index.js~declare",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/data/sagas/index.js",
    "importStyle": "{declare}",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "context",
        "types": [
          "*"
        ]
      },
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 169,
    "kind": "function",
    "name": "tickSaga",
    "memberof": "lib/data/sagas/index.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/data/sagas/index.js~tickSaga",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/data/sagas/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 170,
    "kind": "function",
    "name": "saga",
    "memberof": "lib/data/sagas/index.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/data/sagas/index.js~saga",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/data/sagas/index.js",
    "importStyle": "{saga}",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 171,
    "kind": "file",
    "name": "lib/data/selectors/index.js",
    "content": "import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:data:selectors\");\n\nimport { createSelectorTree, createLeaf } from \"reselect-tree\";\nimport jsonpointer from \"json-pointer\";\n\nimport ast from \"lib/ast/selectors\";\nimport evm from \"lib/evm/selectors\";\nimport context from \"lib/context/selectors\";\n\nimport decode from \"../decode\";\nimport * as decodeUtils from \"../decode/utils\";\n\nimport { BigNumber } from \"bignumber.js\";\n\nfunction cleanBigNumbers(value) {\n  if (BigNumber.isBigNumber(value)) {\n    return value.toNumber();\n\n  } else if (value && value.map != undefined) {\n    return value.map( (inner) => cleanBigNumbers(inner) );\n\n  } else if (value && typeof value == \"object\") {\n    return Object.assign(\n      {}, ...Object.entries(value)\n        .map( ([key, inner]) => ({ [key]: cleanBigNumbers(inner) }) )\n    );\n\n  } else {\n    return value;\n  }\n}\n\nconst data = createSelectorTree({\n  /**\n   * data.views\n   */\n  views: {\n    ast: {\n      current: createLeaf(\n        [ast.current.tree, ast.current.index], (tree, id) => ({tree, id})\n      ),\n\n      next: createLeaf(\n        [ast.next.node, ast.next.pointer], (node, pointer) => ({node, pointer})\n      )\n    }\n  },\n\n  /**\n   * data.scopes\n   */\n  scopes: {\n\n    /**\n     * data.scopes.tables\n     */\n    tables: {\n\n      /**\n       * data.scopes.tables.current\n       *\n       * scopes map for current context\n       */\n      current: createLeaf(\n        [evm.current.call, context.indexBy, (state) => state.data],\n\n        ({address, binary}, indexBy, data) => {\n          let index = address ? indexBy.address(address) : indexBy.binary(binary);\n          return data[index];\n        }\n      ),\n\n      inlined: {\n        /**\n         * data.scopes.tables.inlined.current\n         *\n         * current scope table with inlined AST nodes\n         */\n        current: createLeaf(\n          [\"/scopes/tables/current\", ast.current.tree],\n\n          (table, tree) => Object.assign(\n            {}, ...Object.entries(table).map(\n              ([id, entry]) => ({\n                [id]: {\n                  ...entry,\n\n                  definition: jsonpointer.get(tree, entry.pointer)\n                }\n              })\n            )\n          )\n        )\n      }\n    },\n\n    /**\n     * data.scopes.current\n     */\n    current: {\n\n      /**\n       * data.scopes.current.id\n       *\n       * data scope for current operation\n       */\n      id: createLeaf(\n        [ast.next.node], (node) => node.id\n      )\n    }\n  },\n\n  current: {\n    stack: createLeaf(\n      [evm.next.state.stack],\n\n      (words) => (words || []).map(\n        (word) => decodeUtils.toBytes(decodeUtils.toBigNumber(word, decodeUtils.WORD_SIZE))\n      )\n    ),\n\n    memory: createLeaf(\n      [evm.next.state.memory],\n\n      (words) => new Uint8Array(\n        (words.join(\"\").match(/.{1,2}/g) || [])\n          .map( (byte) => parseInt(byte, 16) )\n      )\n    ),\n\n    storage: createLeaf(\n      [evm.next.state.storage],\n\n      (mapping) => Object.assign(\n        {}, ...Object.entries(mapping).map( ([ address, word ]) =>\n          ({\n            [`0x${address}`]: new Uint8Array(\n              (word.match(/.{1,2}/g) || [])\n                .map( (byte) => parseInt(byte, 16) )\n            )\n          })\n        )\n      )\n    )\n  },\n\n  /**\n   * data.identifiers\n   */\n  identifiers: {\n\n    /**\n     * data.identifiers.current\n     *\n     * map of current identifiers to precise value\n     */\n    current: createLeaf(\n      [\n        \"/scopes/tables/inlined/current\",\n        \"/scopes/current/id\",\n        \"/current\"\n      ],\n\n      (refs, id, state) => {\n        let cur = id;\n        let variables = {};\n\n\n        const format = (v) => {\n          let {stack, memory, storage} = state;\n          let definition = v.definition;\n          var rawValue;\n\n          debug(\"v.ref: %o\", v.ref);\n          if (!v.ref) {\n            return undefined;\n          }\n\n          return decode(definition, v.ref, state, refs);\n        };\n\n        do {\n          variables = Object.assign(\n            variables,\n            ...(refs[cur].variables || [])\n              .filter( (v) => variables[v.name] == undefined )\n              .map( (v) => ({ [v.name]: format(refs[v.id]) }) )\n          );\n\n          cur = refs[cur].parentId;\n        } while (cur != null);\n\n        return variables;\n      }\n    ),\n\n    /**\n     * data.identifiers.native.current\n     *\n     * stripped of bignumbers\n     */\n    native: {\n      current: createLeaf(['/identifiers/current'], cleanBigNumbers)\n    }\n  }\n});\n\nexport default data;\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/data/selectors/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 172,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/data/selectors/index.js",
    "static": true,
    "longname": "lib/data/selectors/index.js~debug",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/data/selectors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 173,
    "kind": "function",
    "name": "cleanBigNumbers",
    "memberof": "lib/data/selectors/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/data/selectors/index.js~cleanBigNumbers",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/data/selectors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 174,
    "kind": "variable",
    "name": "data",
    "memberof": "lib/data/selectors/index.js",
    "static": true,
    "longname": "lib/data/selectors/index.js~data",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/data/selectors/index.js",
    "importStyle": "data",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 175,
    "kind": "file",
    "name": "lib/debugger.js",
    "content": "import debugModule from 'debug';\nimport expect from \"truffle-expect\";\n\nimport Session from \"./session\";\n\nimport { createNestedSelector } from \"reselect-tree\";\n\nimport dataSelector from \"./data/selectors\";\nimport astSelector from \"./ast/selectors\";\nimport traceSelector from \"./trace/selectors\";\nimport evmSelector from \"./evm/selectors\";\nimport soliditySelector from \"./solidity/selectors\";\nimport contextSelector from \"./context/selectors\";\n\nconst debug = debugModule(\"debugger\");\n\n/**\n * @example\n * let session = Debugger\n *   .forTx(<txHash>, {\n *     contracts: [<contract obj>, ...],\n *     provider: <provider instance>\n *   })\n *   .connect();\n */\nexport default class Debugger {\n  /**\n   * @param {Session} session - debugger session\n   * @private\n   */\n  constructor(session) {\n    /**\n     * @private\n     */\n    this._session = session;\n  }\n\n  /**\n   * Instantiates a Debugger for a given transaction hash.\n   *\n   * @param {String} txHash - transaction hash with leading \"0x\"\n   * @param {{contracts: Array<Contract>, provider: Web3Provider}} options -\n   * @return {Debugger} instance\n   */\n  static async forTx(txHash, options = {}) {\n    expect.options(options, [\n      \"contracts\",\n      \"provider\"\n    ]);\n\n    let session = new Session(\n      options.contracts, txHash, options.provider\n    );\n\n    try {\n      await session.ready();\n    } catch (e) {\n      throw e;\n    }\n\n    return new this(session);\n  }\n\n\n  /**\n   * Connects to the instantiated Debugger.\n   *\n   * @return {Session} session instance\n   */\n  connect() {\n    return this._session;\n  }\n\n  /**\n   * Exported selectors\n   *\n   * See individual selector docs for full listing\n   *\n   * @example\n   * Debugger.selectors.ast.current.tree\n   *\n   * @example\n   * Debugger.selectors.solidity.next.instruction\n   *\n   * @example\n   * Debugger.selectors.trace.steps\n   */\n  static get selectors() {\n    return createNestedSelector({\n      ast: astSelector,\n      data: dataSelector,\n      trace: traceSelector,\n      evm: evmSelector,\n      solidity: soliditySelector,\n      context: contextSelector\n    });\n  }\n}\n\n/**\n * @typedef {Object} Contract\n * @property {string} contractName contract name\n * @property {string} source solidity source code\n * @property {string} sourcePath path to source file\n * @property {string} binary 0x-prefixed hex string with create bytecode\n * @property {string} sourceMap solidity source map for create bytecode\n * @property {Object} ast Abstract Syntax Tree from Solidity\n * @property {string} deployedBinary 0x-prefixed compiled binary (on chain)\n * @property {string} deployedSourceMap solidity source map for on-chain bytecode\n */\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/debugger.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 176,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/debugger.js",
    "static": true,
    "longname": "lib/debugger.js~debug",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/debugger.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 177,
    "kind": "class",
    "name": "Debugger",
    "memberof": "lib/debugger.js",
    "static": true,
    "longname": "lib/debugger.js~Debugger",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/debugger.js",
    "importStyle": "Debugger",
    "description": "",
    "examples": [
      "let session = Debugger\n  .forTx(<txHash>, {\n    contracts: [<contract obj>, ...],\n    provider: <provider instance>\n  })\n  .connect();"
    ],
    "lineNumber": 26,
    "interface": false
  },
  {
    "__docId__": 178,
    "kind": "typedef",
    "name": "Contract",
    "memberof": "lib/debugger.js",
    "static": true,
    "longname": "lib/debugger.js~Contract",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "contractName",
        "description": "contract name"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "solidity source code"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "sourcePath",
        "description": "path to source file"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "binary",
        "description": "0x-prefixed hex string with create bytecode"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "sourceMap",
        "description": "solidity source map for create bytecode"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "ast",
        "description": "Abstract Syntax Tree from Solidity"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "deployedBinary",
        "description": "0x-prefixed compiled binary (on chain)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "deployedSourceMap",
        "description": "solidity source map for on-chain bytecode"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Contract"
    }
  },
  {
    "__docId__": 179,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/debugger.js~Debugger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/debugger.js~Debugger#constructor",
    "access": "private",
    "description": "",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "Session"
        ],
        "spread": false,
        "optional": false,
        "name": "session",
        "description": "debugger session"
      }
    ],
    "ignore": true
  },
  {
    "__docId__": 180,
    "kind": "member",
    "name": "_session",
    "memberof": "lib/debugger.js~Debugger",
    "static": false,
    "longname": "lib/debugger.js~Debugger#_session",
    "access": "private",
    "description": "",
    "lineNumber": 35,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 181,
    "kind": "method",
    "name": "forTx",
    "memberof": "lib/debugger.js~Debugger",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/debugger.js~Debugger.forTx",
    "access": "public",
    "description": "Instantiates a Debugger for a given transaction hash.",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "txHash",
        "description": "transaction hash with leading \"0x\""
      },
      {
        "nullable": null,
        "types": [
          "{contracts: Array<Contract>, provider: Web3Provider}"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Debugger"
      ],
      "spread": false,
      "description": "instance"
    }
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "connect",
    "memberof": "lib/debugger.js~Debugger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/debugger.js~Debugger#connect",
    "access": "public",
    "description": "Connects to the instantiated Debugger.",
    "lineNumber": 70,
    "return": {
      "nullable": null,
      "types": [
        "Session"
      ],
      "spread": false,
      "description": "session instance"
    },
    "params": []
  },
  {
    "__docId__": 183,
    "kind": "get",
    "name": "selectors",
    "memberof": "lib/debugger.js~Debugger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/debugger.js~Debugger.selectors",
    "access": "public",
    "description": "Exported selectors\n\nSee individual selector docs for full listing",
    "examples": [
      "Debugger.selectors.ast.current.tree",
      "Debugger.selectors.solidity.next.instruction",
      "Debugger.selectors.trace.steps"
    ],
    "lineNumber": 88,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 184,
    "kind": "file",
    "name": "lib/evm/actions/index.js",
    "content": "export const CALL = \"CALL\";\nexport function call(address) {\n  return {\n    type: CALL,\n    address\n  };\n}\n\nexport const CREATE = \"CREATE\";\nexport function create(binary) {\n  return {\n    type: CREATE,\n    binary\n  };\n}\n\nexport const RETURN = \"RETURN\";\nexport function returnCall() {\n  return {\n    type: RETURN\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/evm/actions/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 185,
    "kind": "variable",
    "name": "CALL",
    "memberof": "lib/evm/actions/index.js",
    "static": true,
    "longname": "lib/evm/actions/index.js~CALL",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/evm/actions/index.js",
    "importStyle": "{CALL}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "function",
    "name": "call",
    "memberof": "lib/evm/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/evm/actions/index.js~call",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/evm/actions/index.js",
    "importStyle": "{call}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "address",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"address\": *}"
      ]
    }
  },
  {
    "__docId__": 187,
    "kind": "variable",
    "name": "CREATE",
    "memberof": "lib/evm/actions/index.js",
    "static": true,
    "longname": "lib/evm/actions/index.js~CREATE",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/evm/actions/index.js",
    "importStyle": "{CREATE}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "function",
    "name": "create",
    "memberof": "lib/evm/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/evm/actions/index.js~create",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/evm/actions/index.js",
    "importStyle": "{create}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "binary",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"binary\": *}"
      ]
    }
  },
  {
    "__docId__": 189,
    "kind": "variable",
    "name": "RETURN",
    "memberof": "lib/evm/actions/index.js",
    "static": true,
    "longname": "lib/evm/actions/index.js~RETURN",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/evm/actions/index.js",
    "importStyle": "{RETURN}",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "function",
    "name": "returnCall",
    "memberof": "lib/evm/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/evm/actions/index.js~returnCall",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/evm/actions/index.js",
    "importStyle": "{returnCall}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"type\": *}"
      ]
    }
  },
  {
    "__docId__": 191,
    "kind": "file",
    "name": "lib/evm/reducers.js",
    "content": "import { combineReducers } from \"redux\";\n\nimport * as actions from \"./actions\";\n\nexport function callstack(state = [], action) {\n  switch(action.type) {\n    case actions.CALL:\n      let address = action.address;\n      return state.concat([ {address} ]);\n\n    case actions.CREATE:\n      const binary = action.binary;\n      return state.concat([ {binary} ]);\n\n    case actions.RETURN:\n      return state.slice(0, -1); // pop\n\n    default:\n      return state;\n  };\n}\n\nconst reducer = combineReducers({\n  callstack,\n});\n\nexport default reducer;\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/evm/reducers.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 192,
    "kind": "function",
    "name": "callstack",
    "memberof": "lib/evm/reducers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/evm/reducers.js~callstack",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/evm/reducers.js",
    "importStyle": "{callstack}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      },
      {
        "name": "action",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 193,
    "kind": "variable",
    "name": "reducer",
    "memberof": "lib/evm/reducers.js",
    "static": true,
    "longname": "lib/evm/reducers.js~reducer",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/evm/reducers.js",
    "importStyle": "reducer",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "file",
    "name": "lib/evm/sagas/index.js",
    "content": "import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:evm:sagas\");\n\nimport { call, put, take, select } from \"redux-saga/effects\";\nimport { prefixName } from \"lib/helpers\";\n\nimport { TICK } from \"lib/trace/actions\";\nimport * as actions from \"../actions\";\n\nimport evm from \"../selectors\";\n\nexport function* begin({ address, binary }) {\n  if (address) {\n    yield put(actions.call(address));\n  } else {\n    yield put(actions.create(binary));\n  }\n}\n\nexport function* callstackSaga () {\n  while (true) {\n    yield take(TICK);\n    debug(\"got TICK\");\n\n    if (yield select(evm.next.step.isCall)) {\n      debug(\"got call\");\n      let address = yield select(evm.next.step.callAddress);\n\n      yield put(actions.call(address));\n\n    } else if (yield select(evm.next.step.isCreate)) {\n      debug(\"got create\");\n      let binary = yield select(evm.next.step.createBinary);\n\n      yield put(actions.create(binary));\n\n    } else if (yield select(evm.next.step.isHalting)) {\n      debug(\"got return\");\n      yield put(actions.returnCall());\n    }\n  }\n}\n\nexport function* saga () {\n  yield call(callstackSaga);\n}\n\nexport default prefixName(\"evm\", saga);\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/evm/sagas/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 195,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/evm/sagas/index.js",
    "static": true,
    "longname": "lib/evm/sagas/index.js~debug",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/evm/sagas/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 196,
    "kind": "function",
    "name": "begin",
    "memberof": "lib/evm/sagas/index.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/evm/sagas/index.js~begin",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/evm/sagas/index.js",
    "importStyle": "{begin}",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"address\": *, \"binary\": *}"
        ],
        "defaultRaw": {
          "address": null,
          "binary": null
        },
        "defaultValue": "{\"address\":null,\"binary\":null}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 197,
    "kind": "function",
    "name": "callstackSaga",
    "memberof": "lib/evm/sagas/index.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/evm/sagas/index.js~callstackSaga",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/evm/sagas/index.js",
    "importStyle": "{callstackSaga}",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 198,
    "kind": "function",
    "name": "saga",
    "memberof": "lib/evm/sagas/index.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/evm/sagas/index.js~saga",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/evm/sagas/index.js",
    "importStyle": "{saga}",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 199,
    "kind": "file",
    "name": "lib/evm/selectors/index.js",
    "content": "import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:evm:selectors\");\n\nimport { createSelectorTree, createLeaf } from \"reselect-tree\";\n\nimport trace from \"lib/trace/selectors\";\n\n\nconst evm = createSelectorTree({\n\n  /**\n   * evm.current\n   */\n  current: {\n\n    /**\n     * evm.current.callstack\n     */\n    callstack: (state) => state.evm.callstack,\n\n    /**\n     * evm.current.call\n     */\n    call: createLeaf(\n      [\"./callstack\"],\n\n      (stack) => stack.length ? stack[stack.length - 1] : {}\n    ),\n\n    /**\n     * evm.current.state\n     *\n     * evm state info: as of last operation, before op defined in step\n     */\n    state: createLeaf(\n      [trace.step], ({depth, error, gas, memory, stack, storage}) =>\n        ({depth, error, gas, memory, stack, storage})\n    ),\n\n    /**\n     * evm.current.stack\n     *\n     * stack data\n     */\n    stack: createLeaf(\n      [trace.step], (step) => step.stack\n    ),\n\n    /**\n     * evm.current.memory\n     *\n     * memory data\n     */\n    memory: createLeaf(\n      [trace.step], (step) => step.memory\n    ),\n\n    /**\n     * evm.current.storage,\n     *\n     * storage data\n     */\n    storage: createLeaf(\n      [trace.step], (step) => step.storage\n    )\n  },\n\n  /**\n   * evm.next\n   */\n  next: {\n\n    /**\n     * evm.next.state\n     *\n     * evm state as a result of next step operation\n     */\n    state: Object.assign({}, ...(\n      [\n        \"depth\",\n        \"error\",\n        \"gas\",\n        \"memory\",\n        \"stack\",\n        \"storage\"\n      ].map( (param) => ({\n        [param]: createLeaf([trace.next], (step) => step[param])\n      }))\n    )),\n\n    /**\n     * evm.next.step\n     */\n    step: {\n      /**\n       * evm.next.step.trace\n       *\n       * trace step info related to next evm operation\n       */\n      trace: createLeaf(\n        [trace.step], ({gasCost, op, pc}) => ({gasCost, op, pc})\n      ),\n\n      /**\n       * evm.next.step.programCounter\n       */\n      programCounter: createLeaf(\n        [\"./trace\"], (step) => step.pc\n      ),\n\n      /**\n       * evm.next.step.isJump\n       */\n      isJump: createLeaf(\n        [\"./trace\"], (step) => (\n          step.op != \"JUMPDEST\" && step.op.indexOf(\"JUMP\") == 0\n        )\n      ),\n\n      /**\n       * evm.next.step.isCall\n       *\n       * whether the next opcode will switch to another calling context\n       */\n      isCall: createLeaf(\n        [\"./trace\"], (step) => step.op == \"CALL\" || step.op == \"DELEGATECALL\"\n      ),\n\n      /**\n       * evm.next.step.isCreate\n       */\n      isCreate: createLeaf(\n        [\"./trace\"], (step) => step.op == \"CREATE\"\n      ),\n\n      /**\n       * evm.next.step.isHalting\n       *\n       * whether the next instruction halts or returns from a calling context\n       */\n      isHalting: createLeaf(\n        [\"./trace\"], (step) => step.op == \"STOP\" || step.op == \"RETURN\"\n      ),\n\n      /**\n       * evm.next.step.callAddress\n       *\n       * address transferred to by call operation\n       */\n      callAddress: createLeaf(\n        [\"./isCall\", \"./trace\", \"/current/state\"],\n\n        (matches, step, {stack}) => {\n          if (!matches) return null;\n\n          let address = stack[stack.length - 2]\n          address = \"0x\" + address.substring(24);\n          return address;\n        }\n      ),\n\n      /**\n       * evm.next.step.createBinary\n       *\n       * binary code to execute via create operation\n       */\n      createBinary: createLeaf(\n        [\"./isCreate\", \"./trace\", \"/current/state\"],\n\n        (matches, step, {stack, memory}) => {\n          if (!matches) return null;\n\n          // Get the code that's going to be created from memory.\n          // Note we multiply by 2 because these offsets are in bytes.\n          const offset = parseInt(stack[stack.length - 2], 16) * 2;\n          const length = parseInt(stack[stack.length - 3], 16) * 2;\n\n          return \"0x\" + memory.join(\"\").substring(offset, offset + length);\n        }\n      ),\n    }\n  }\n});\n\nexport default evm;\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/evm/selectors/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 200,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/evm/selectors/index.js",
    "static": true,
    "longname": "lib/evm/selectors/index.js~debug",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/evm/selectors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 201,
    "kind": "variable",
    "name": "evm",
    "memberof": "lib/evm/selectors/index.js",
    "static": true,
    "longname": "lib/evm/selectors/index.js~evm",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/evm/selectors/index.js",
    "importStyle": "evm",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 202,
    "kind": "file",
    "name": "lib/helpers/index.js",
    "content": "export function prefixName(prefix, fn) {\n  Object.defineProperty(fn, 'name', {\n    value: `${prefix}.${fn.name}`,\n    configurable: true\n  });\n\n  return fn;\n}\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/helpers/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 203,
    "kind": "function",
    "name": "prefixName",
    "memberof": "lib/helpers/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/helpers/index.js~prefixName",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/helpers/index.js",
    "importStyle": "{prefixName}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "prefix",
        "types": [
          "*"
        ]
      },
      {
        "name": "fn",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 204,
    "kind": "file",
    "name": "lib/session/actions/index.js",
    "content": "export const START = \"SESSION_START\";\nexport function start(txHash, provider) {\n  return {\n    type: START,\n    txHash, provider\n  };\n}\n\nexport const READY = \"SESSION_READY\";\nexport function ready() {\n  return {\n    type: READY,\n  };\n}\n\nexport const ERROR = \"SESSION_ERROR\";\nexport function error(error) {\n  return {\n    type: ERROR,\n    error\n  };\n}\n\nexport const FINISH = \"SESSION_FINISH\";\nexport function finish() {\n  return {\n    type: FINISH,\n  };\n}\n\nexport const RECORD_CONTRACTS = \"RECORD_CONTRACTS\";\nexport function recordContracts(...contracts) {\n  return {\n    type: RECORD_CONTRACTS,\n    contracts\n  }\n}\n\nexport const RECORD_TRACE_CONTEXTS = \"RECORD_TRACE_CONTEXTS\";\nexport function recordTraceContexts(...contexts) {\n  return {\n    type: RECORD_TRACE_CONTEXTS,\n    contexts\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/session/actions/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 205,
    "kind": "variable",
    "name": "START",
    "memberof": "lib/session/actions/index.js",
    "static": true,
    "longname": "lib/session/actions/index.js~START",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/session/actions/index.js",
    "importStyle": "{START}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 206,
    "kind": "function",
    "name": "start",
    "memberof": "lib/session/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/session/actions/index.js~start",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/session/actions/index.js",
    "importStyle": "{start}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "txHash",
        "types": [
          "*"
        ]
      },
      {
        "name": "provider",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"txHash\": *, \"provider\": *}"
      ]
    }
  },
  {
    "__docId__": 207,
    "kind": "variable",
    "name": "READY",
    "memberof": "lib/session/actions/index.js",
    "static": true,
    "longname": "lib/session/actions/index.js~READY",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/session/actions/index.js",
    "importStyle": "{READY}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 208,
    "kind": "function",
    "name": "ready",
    "memberof": "lib/session/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/session/actions/index.js~ready",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/session/actions/index.js",
    "importStyle": "{ready}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"type\": *}"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "variable",
    "name": "ERROR",
    "memberof": "lib/session/actions/index.js",
    "static": true,
    "longname": "lib/session/actions/index.js~ERROR",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/session/actions/index.js",
    "importStyle": "{ERROR}",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 210,
    "kind": "function",
    "name": "error",
    "memberof": "lib/session/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/session/actions/index.js~error",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/session/actions/index.js",
    "importStyle": "{error}",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "error",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"error\": *}"
      ]
    }
  },
  {
    "__docId__": 211,
    "kind": "variable",
    "name": "FINISH",
    "memberof": "lib/session/actions/index.js",
    "static": true,
    "longname": "lib/session/actions/index.js~FINISH",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/session/actions/index.js",
    "importStyle": "{FINISH}",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 212,
    "kind": "function",
    "name": "finish",
    "memberof": "lib/session/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/session/actions/index.js~finish",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/session/actions/index.js",
    "importStyle": "{finish}",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"type\": *}"
      ]
    }
  },
  {
    "__docId__": 213,
    "kind": "variable",
    "name": "RECORD_CONTRACTS",
    "memberof": "lib/session/actions/index.js",
    "static": true,
    "longname": "lib/session/actions/index.js~RECORD_CONTRACTS",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/session/actions/index.js",
    "importStyle": "{RECORD_CONTRACTS}",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 214,
    "kind": "function",
    "name": "recordContracts",
    "memberof": "lib/session/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/session/actions/index.js~recordContracts",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/session/actions/index.js",
    "importStyle": "{recordContracts}",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [
      {
        "name": "contracts",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"contracts\": *}"
      ]
    }
  },
  {
    "__docId__": 215,
    "kind": "variable",
    "name": "RECORD_TRACE_CONTEXTS",
    "memberof": "lib/session/actions/index.js",
    "static": true,
    "longname": "lib/session/actions/index.js~RECORD_TRACE_CONTEXTS",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/session/actions/index.js",
    "importStyle": "{RECORD_TRACE_CONTEXTS}",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 216,
    "kind": "function",
    "name": "recordTraceContexts",
    "memberof": "lib/session/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/session/actions/index.js~recordTraceContexts",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/session/actions/index.js",
    "importStyle": "{recordTraceContexts}",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [
      {
        "name": "contexts",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"contexts\": *}"
      ]
    }
  },
  {
    "__docId__": 217,
    "kind": "file",
    "name": "lib/session/index.js",
    "content": "import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:session\");\n\nimport trace from \"lib/trace/selectors\";\nimport evm from \"lib/evm/selectors\";\nimport ast from \"lib/ast/selectors\";\nimport solidity from \"lib/solidity/selectors\";\n\nimport configureStore from \"lib/store\";\n\nimport * as controller from \"lib/controller/actions\";\nimport * as actions from \"./actions\";\n\nimport rootSaga from \"./sagas\";\nimport reducer from \"./reducers\";\n\n/**\n * Debugger Session\n */\nexport default class Session {\n  /**\n   * @param {Array<Contract>} contracts - contract definitions\n   * @param {string} txHash - transaction hash\n   * @param {Web3Provider} provider - web3 provider\n   * @private\n   */\n  constructor(contracts, txHash, provider) {\n    /**\n     * @private\n     */\n    this._store = configureStore(reducer, rootSaga);\n\n    // record contracts\n    this._store.dispatch(actions.recordContracts(...contracts));\n\n    this._store.dispatch(actions.start(txHash, provider));\n  }\n\n  ready() {\n    return new Promise( (accept, reject) => {\n      this._store.subscribe( () => {\n        if (this.state.session == \"ACTIVE\") {\n          accept()\n        } else if (typeof this.state.session == \"object\") {\n          reject(this.state.session.error);\n        }\n      });\n    });\n  }\n\n  get state() {\n    return this._store.getState();\n  }\n\n  view(selector) {\n    return selector(this.state);\n  }\n\n  get finished() {\n    return this.state.session == \"FINISHED\";\n  }\n\n  get failed() {\n    return this.finished && this.view(evm.current.callstack).length\n  }\n\n  dispatch(action) {\n    if (this.finished) {\n      debug(\"finished: intercepting action %o\", action);\n\n      return false;\n    }\n\n    this._store.dispatch(action);\n\n    return true;\n  }\n\n  interrupt() {\n    return this.dispatch(controller.interrupt());\n  }\n\n  advance() {\n    return this.dispatch(controller.advance());\n  }\n\n  stepNext() {\n    return this.dispatch(controller.stepNext());\n  }\n\n  stepOver() {\n    return this.dispatch(controller.stepOver());\n  }\n\n  stepInto() {\n    return this.dispatch(controller.stepInto());\n  }\n\n  stepOut() {\n    return this.dispatch(controller.stepOut());\n  }\n\n  continueUntil(...breakpoints) {\n    return this.dispatch(controller.continueUntil(...breakpoints));\n  }\n}\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/session/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 218,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/session/index.js",
    "static": true,
    "longname": "lib/session/index.js~debug",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/session/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 219,
    "kind": "class",
    "name": "Session",
    "memberof": "lib/session/index.js",
    "static": true,
    "longname": "lib/session/index.js~Session",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/session/index.js",
    "importStyle": "Session",
    "description": "Debugger Session",
    "lineNumber": 20,
    "interface": false
  },
  {
    "__docId__": 220,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/session/index.js~Session",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/session/index.js~Session#constructor",
    "access": "private",
    "description": "",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Contract>"
        ],
        "spread": false,
        "optional": false,
        "name": "contracts",
        "description": "contract definitions"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "txHash",
        "description": "transaction hash"
      },
      {
        "nullable": null,
        "types": [
          "Web3Provider"
        ],
        "spread": false,
        "optional": false,
        "name": "provider",
        "description": "web3 provider"
      }
    ],
    "ignore": true
  },
  {
    "__docId__": 221,
    "kind": "member",
    "name": "_store",
    "memberof": "lib/session/index.js~Session",
    "static": false,
    "longname": "lib/session/index.js~Session#_store",
    "access": "private",
    "description": "",
    "lineNumber": 31,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "ready",
    "memberof": "lib/session/index.js~Session",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/session/index.js~Session#ready",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 223,
    "kind": "get",
    "name": "state",
    "memberof": "lib/session/index.js~Session",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/session/index.js~Session#state",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "view",
    "memberof": "lib/session/index.js~Session",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/session/index.js~Session#view",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [
      {
        "name": "selector",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 225,
    "kind": "get",
    "name": "finished",
    "memberof": "lib/session/index.js~Session",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/session/index.js~Session#finished",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 226,
    "kind": "get",
    "name": "failed",
    "memberof": "lib/session/index.js~Session",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/session/index.js~Session#failed",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "dispatch",
    "memberof": "lib/session/index.js~Session",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/session/index.js~Session#dispatch",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "params": [
      {
        "name": "action",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "interrupt",
    "memberof": "lib/session/index.js~Session",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/session/index.js~Session#interrupt",
    "access": "public",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 229,
    "kind": "method",
    "name": "advance",
    "memberof": "lib/session/index.js~Session",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/session/index.js~Session#advance",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 230,
    "kind": "method",
    "name": "stepNext",
    "memberof": "lib/session/index.js~Session",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/session/index.js~Session#stepNext",
    "access": "public",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 231,
    "kind": "method",
    "name": "stepOver",
    "memberof": "lib/session/index.js~Session",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/session/index.js~Session#stepOver",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "method",
    "name": "stepInto",
    "memberof": "lib/session/index.js~Session",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/session/index.js~Session#stepInto",
    "access": "public",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 233,
    "kind": "method",
    "name": "stepOut",
    "memberof": "lib/session/index.js~Session",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/session/index.js~Session#stepOut",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 234,
    "kind": "method",
    "name": "continueUntil",
    "memberof": "lib/session/index.js~Session",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/session/index.js~Session#continueUntil",
    "access": "public",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "params": [
      {
        "name": "breakpoints",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 235,
    "kind": "file",
    "name": "lib/session/reducers.js",
    "content": "import { combineReducers } from \"redux\";\n\nimport context from \"lib/context/reducers\";\nimport data from \"lib/data/reducers\";\nimport evm from \"lib/evm/reducers\";\nimport solidity from \"lib/solidity/reducers\";\nimport trace from \"lib/trace/reducers\";\n\nimport * as actions from \"./actions\";\n\nexport const WAITING = \"WAITING\";\nexport const ACTIVE = \"ACTIVE\";\nexport const ERROR = \"ERROR\";\nexport const FINISHED = \"FINISHED\";\n\nexport function session(state = WAITING, action) {\n  switch (action.type) {\n    case actions.READY:\n      return ACTIVE;\n\n    case actions.ERROR:\n      return { error: action.error };\n\n    case actions.FINISH:\n      return FINISHED;\n\n    default:\n      return state;\n  }\n}\n\nconst reduceState = combineReducers({\n  session,\n  context,\n  data,\n  evm,\n  solidity,\n  trace,\n});\n\nexport default reduceState;\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/session/reducers.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 236,
    "kind": "variable",
    "name": "WAITING",
    "memberof": "lib/session/reducers.js",
    "static": true,
    "longname": "lib/session/reducers.js~WAITING",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/session/reducers.js",
    "importStyle": "{WAITING}",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 237,
    "kind": "variable",
    "name": "ACTIVE",
    "memberof": "lib/session/reducers.js",
    "static": true,
    "longname": "lib/session/reducers.js~ACTIVE",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/session/reducers.js",
    "importStyle": "{ACTIVE}",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "variable",
    "name": "ERROR",
    "memberof": "lib/session/reducers.js",
    "static": true,
    "longname": "lib/session/reducers.js~ERROR",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/session/reducers.js",
    "importStyle": "{ERROR}",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 239,
    "kind": "variable",
    "name": "FINISHED",
    "memberof": "lib/session/reducers.js",
    "static": true,
    "longname": "lib/session/reducers.js~FINISHED",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/session/reducers.js",
    "importStyle": "{FINISHED}",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 240,
    "kind": "function",
    "name": "session",
    "memberof": "lib/session/reducers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/session/reducers.js~session",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/session/reducers.js",
    "importStyle": "{session}",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": "WAITING",
        "defaultValue": "WAITING"
      },
      {
        "name": "action",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 241,
    "kind": "variable",
    "name": "reduceState",
    "memberof": "lib/session/reducers.js",
    "static": true,
    "longname": "lib/session/reducers.js~reduceState",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/session/reducers.js",
    "importStyle": "reduceState",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 242,
    "kind": "file",
    "name": "lib/session/sagas/index.js",
    "content": "import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:session:sagas\");\n\nimport { cancel, call, all, fork, take, put } from 'redux-saga/effects';\n\nimport { prefixName } from \"lib/helpers\";\n\nimport * as ast from \"lib/ast/sagas\";\nimport * as context from \"lib/context/sagas\";\nimport * as controller from \"lib/controller/sagas\";\nimport * as solidity from \"lib/solidity/sagas\";\nimport * as evm from \"lib/evm/sagas\";\nimport * as trace from \"lib/trace/sagas\";\nimport * as data from \"lib/data/sagas\";\nimport * as web3 from \"lib/web3/sagas\";\n\nimport * as actions from \"../actions\";\n\nexport function *saga () {\n  let listeners = yield *forkListeners();\n\n  // receiving & saving contracts into state\n  let {contracts} = yield take(actions.RECORD_CONTRACTS);\n  yield *recordContracts(...contracts);\n\n  // wait for start signal\n  let {txHash, provider} = yield take(actions.START);\n\n  // process transaction\n  let err = yield *fetchTx(txHash, provider);\n  if (err) {\n    yield *error(err);\n\n  } else {\n    // visit asts\n    yield *ast.visitAll();\n\n    // signal that stepping can begin\n    yield *ready();\n\n    // wait until trace hits EOT\n    yield *trace.wait();\n\n    // finish\n    yield put(actions.finish());\n  }\n\n  yield all(\n    listeners.map(task => cancel(task))\n  );\n}\n\nexport default prefixName(\"session\", saga);\n\n\nfunction *forkListeners() {\n  return yield all(\n    [ast, controller, data, evm, solidity, trace, web3]\n      .map( app => fork(app.saga) )\n  );\n}\n\nfunction* fetchTx(txHash, provider) {\n  let result = yield *web3.inspectTransaction(txHash, provider);\n\n  if (result.error) {\n    return result.error;\n  }\n\n  yield *evm.begin(result);\n\n  let addresses = yield *trace.processTrace(result.trace);\n  if (result.address && addresses.indexOf(result.address) == -1) {\n    addresses.push(result.address);\n  }\n\n  let binaries = yield *web3.obtainBinaries(addresses);\n\n  yield all(\n    addresses.map( (address, i) => call(context.addOrMerge, {\n      binary: binaries[i],\n      addresses: [address],\n    }))\n  );\n}\n\nfunction *ready() {\n  debug(\"ready\");\n  yield put(actions.ready());\n}\n\nfunction *error(err) {\n  debug(\"error\");\n  yield put(actions.error(err));\n}\n\nfunction* recordContracts(...contracts) {\n  for (let contract of contracts) {\n    // create Context for binary and deployed binary\n    yield *context.addOrMerge({\n      binary: contract.binary,\n      addresses: [],\n      ast: contract.ast,\n      sourceMap: contract.sourceMap,\n      source: contract.source,\n      sourcePath: contract.sourcePath,\n      contractName: contract.contractName\n    });\n\n    yield *context.addOrMerge({\n      binary: contract.deployedBinary,\n      addresses: [],\n      ast: contract.ast,\n      sourceMap: contract.deployedSourceMap,\n      source: contract.source,\n      sourcePath: contract.sourcePath,\n      contractName: contract.contractName\n    });\n  }\n}\n\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/session/sagas/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 243,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/session/sagas/index.js",
    "static": true,
    "longname": "lib/session/sagas/index.js~debug",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/session/sagas/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 244,
    "kind": "function",
    "name": "saga",
    "memberof": "lib/session/sagas/index.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/session/sagas/index.js~saga",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/session/sagas/index.js",
    "importStyle": "{saga}",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 245,
    "kind": "function",
    "name": "forkListeners",
    "memberof": "lib/session/sagas/index.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/session/sagas/index.js~forkListeners",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/session/sagas/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 246,
    "kind": "function",
    "name": "fetchTx",
    "memberof": "lib/session/sagas/index.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/session/sagas/index.js~fetchTx",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/session/sagas/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [
      {
        "name": "txHash",
        "types": [
          "*"
        ]
      },
      {
        "name": "provider",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 247,
    "kind": "function",
    "name": "ready",
    "memberof": "lib/session/sagas/index.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/session/sagas/index.js~ready",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/session/sagas/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 248,
    "kind": "function",
    "name": "error",
    "memberof": "lib/session/sagas/index.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/session/sagas/index.js~error",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/session/sagas/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "params": [
      {
        "name": "err",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 249,
    "kind": "function",
    "name": "recordContracts",
    "memberof": "lib/session/sagas/index.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/session/sagas/index.js~recordContracts",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/session/sagas/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "params": [
      {
        "name": "contracts",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 250,
    "kind": "file",
    "name": "lib/solidity/actions/index.js",
    "content": "export const JUMP = \"JUMP\";\nexport function jump(jumpDirection) {\n  return {\n    type: JUMP,\n    jumpDirection\n  };\n}\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/solidity/actions/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 251,
    "kind": "variable",
    "name": "JUMP",
    "memberof": "lib/solidity/actions/index.js",
    "static": true,
    "longname": "lib/solidity/actions/index.js~JUMP",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/solidity/actions/index.js",
    "importStyle": "{JUMP}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 252,
    "kind": "function",
    "name": "jump",
    "memberof": "lib/solidity/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/solidity/actions/index.js~jump",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/solidity/actions/index.js",
    "importStyle": "{jump}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "jumpDirection",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"jumpDirection\": *}"
      ]
    }
  },
  {
    "__docId__": 253,
    "kind": "file",
    "name": "lib/solidity/reducers.js",
    "content": "import { combineReducers } from \"redux\";\n\nimport * as actions from \"./actions\";\n\nexport function functionDepth(state = 1, action) {\n  if (action.type === actions.JUMP) {\n    const delta = spelunk(action.jumpDirection)\n    return state + delta;\n  } else {\n    return state;\n  }\n}\n\nfunction spelunk(jump) {\n  if (jump == \"i\") {\n    return 1;\n  } else if (jump == \"o\") {\n    return -1;\n  } else {\n    return 0;\n  }\n}\n\nconst reducer = combineReducers({\n  functionDepth\n});\n\nexport default reducer;\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/solidity/reducers.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 254,
    "kind": "function",
    "name": "functionDepth",
    "memberof": "lib/solidity/reducers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/solidity/reducers.js~functionDepth",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/solidity/reducers.js",
    "importStyle": "{functionDepth}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 1,
        "defaultValue": "1"
      },
      {
        "name": "action",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 255,
    "kind": "function",
    "name": "spelunk",
    "memberof": "lib/solidity/reducers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/solidity/reducers.js~spelunk",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/solidity/reducers.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "jump",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 256,
    "kind": "variable",
    "name": "reducer",
    "memberof": "lib/solidity/reducers.js",
    "static": true,
    "longname": "lib/solidity/reducers.js~reducer",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/solidity/reducers.js",
    "importStyle": "reducer",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 257,
    "kind": "file",
    "name": "lib/solidity/sagas/index.js",
    "content": "import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:solidity:sagas\");\n\nimport { call, put, take, select } from \"redux-saga/effects\";\nimport { prefixName } from \"lib/helpers\";\n\nimport * as actions from \"../actions\";\nimport { TICK } from \"lib/trace/actions\";\n\nimport solidity from \"../selectors\";\n\n\nfunction* functionDepthSaga () {\n  while (true) {\n    yield take(TICK);\n    debug(\"got TICK\");\n    let instruction = yield select(solidity.next.instruction);\n    debug(\"instruction: %o\", instruction);\n\n    if (yield select(solidity.next.willJump)) {\n      let jumpDirection = yield select(solidity.next.jumpDirection);\n\n\n      yield put(actions.jump(jumpDirection));\n    }\n  }\n}\n\nexport function* saga () {\n  yield call(functionDepthSaga);\n}\n\nexport default prefixName(\"solidity\", saga);\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/solidity/sagas/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 258,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/solidity/sagas/index.js",
    "static": true,
    "longname": "lib/solidity/sagas/index.js~debug",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/solidity/sagas/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 259,
    "kind": "function",
    "name": "functionDepthSaga",
    "memberof": "lib/solidity/sagas/index.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/solidity/sagas/index.js~functionDepthSaga",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/solidity/sagas/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 260,
    "kind": "function",
    "name": "saga",
    "memberof": "lib/solidity/sagas/index.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/solidity/sagas/index.js~saga",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/solidity/sagas/index.js",
    "importStyle": "{saga}",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 261,
    "kind": "file",
    "name": "lib/solidity/selectors/index.js",
    "content": "import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:solidity:selectors\");\n\nimport { createSelectorTree, createLeaf } from \"reselect-tree\";\nimport SolidityUtils from \"truffle-solidity-utils\";\nimport CodeUtils from \"truffle-code-utils\";\n\nimport context from \"lib/context/selectors\";\nimport evm from \"lib/evm/selectors\";\n\n\nlet solidity = createSelectorTree({\n  /**\n   * solidity.current\n   */\n  current: {\n\n    /**\n     * solidity.current.functionDepth\n     */\n    functionDepth: (state) => state.solidity.functionDepth,\n\n    /**\n     * solidity.current.instructions\n     */\n    instructions: createLeaf(\n      [context.current], (context) => {\n        debug(\"context: %o\", context);\n        let instructions = CodeUtils.parseCode(context.binary);\n\n        let sourceMap = context.sourceMap;\n        if (!sourceMap) {\n          // Let's create a source map to use since none exists. This source map\n          // maps just as many ranges as there are instructions, and ensures every\n          // instruction is marked as \"jumping out\". This will ensure all\n          // available debugger commands step one instruction at a time.\n          //\n          // This is kindof a hack; perhaps this should be broken out into separate\n          // context types. TODO\n          sourceMap = \"\";\n          for (var i = 0; i < instructions.length; i++) {\n            sourceMap += i + \":\" + i + \":1:o;\";\n          }\n        }\n\n        var lineAndColumnMapping = SolidityUtils.getCharacterOffsetToLineAndColumnMapping(context.source || \"\");\n        var humanReadableSourceMap = SolidityUtils.getHumanReadableSourceMap(sourceMap);\n\n        instructions.forEach(function(instruction, instructionIndex) {\n          var sourceMapInstruction = humanReadableSourceMap[instructionIndex];\n\n          instruction.index = instructionIndex;\n\n          if (sourceMapInstruction) {\n            instruction.jump = sourceMapInstruction.jump;\n            instruction.start = sourceMapInstruction.start;\n            instruction.length = sourceMapInstruction.length;\n            instruction.range = {\n              start: lineAndColumnMapping[sourceMapInstruction.start],\n              end: lineAndColumnMapping[sourceMapInstruction.start + sourceMapInstruction.length]\n            }\n          }\n        });\n        debug(\"instructions: %O\", instructions.filter((i) => i.jump != \"-\"));\n\n        return instructions;\n      }\n    ),\n\n    /**\n     * solidity.current.instructionAtProgramCounter\n     */\n    instructionAtProgramCounter: createLeaf(\n      [\"./instructions\"],\n\n      (instructions) => {\n        let map = [];\n        instructions.forEach(function(instruction) {\n          map[instruction.pc] = instruction;\n        });\n        return map;\n      }\n    )\n  },\n\n  /**\n   * solidity.next\n   */\n  next: {\n\n    /**\n     * solidity.next.instruction\n     */\n    instruction: createLeaf(\n      [\"../current/instructionAtProgramCounter\", evm.next.step.programCounter],\n\n      (map, pc) => map[pc]\n    ),\n\n    /**\n     * solidity.next.sourceRange\n     */\n    sourceRange: createLeaf(\n      [\"./instruction\"],\n\n      (instruction) => {\n        return {\n          start: instruction.start,\n          length: instruction.length,\n          lines: instruction.range\n        };\n      }\n    ),\n\n    /**\n     * solidity.next.isMultiline\n     */\n    isMultiline: createLeaf(\n      [\"./sourceRange\"],\n\n      ( {lines} ) => lines.start.line != lines.end.line\n    ),\n\n    /**\n     * solidity.next.willJump\n     */\n    willJump: createLeaf([evm.next.step.isJump], (isJump) => isJump),\n\n    /**\n     * solidity.next.jumpDirection\n     */\n    jumpDirection: createLeaf(\n      [\"./instruction\"], (i) => i.jump\n    )\n  }\n});\n\nexport default solidity;\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/solidity/selectors/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 262,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/solidity/selectors/index.js",
    "static": true,
    "longname": "lib/solidity/selectors/index.js~debug",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/solidity/selectors/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 263,
    "kind": "variable",
    "name": "solidity",
    "memberof": "lib/solidity/selectors/index.js",
    "static": true,
    "longname": "lib/solidity/selectors/index.js~solidity",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/solidity/selectors/index.js",
    "importStyle": "solidity",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 264,
    "kind": "file",
    "name": "lib/store/common.js",
    "content": "import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:store:common\");\nconst reduxDebug = debugModule(\"debugger:redux\");\n\nimport { compose, createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport createLogger from \"redux-cli-logger\";\n\nexport default function configureStore (reducer, saga, initialState, composeEnhancers) {\n  const sagaMiddleware = createSagaMiddleware();\n\n  if (!composeEnhancers) {\n    composeEnhancers = compose;\n  }\n\n  const loggerMiddleware = createLogger({\n    log: reduxDebug,\n    stateTransformer: (state) => ({\n      ...state,\n\n      data: {\n        ...Object.assign(\n          {},\n          ...Object.entries(state.data)\n            .map( ([context, scope]) => ({\n              [context]: {\n                ...Object.assign(\n                  {},\n                  ...Object.entries(scope)\n                    .filter( ([id, {variables}]) => variables && variables.length > 0 )\n                    .map(\n                      ([id, {variables}]) => ({\n                        [id]: (variables || []).map( (v) => v.name )\n                      })\n                    )\n                )\n              }\n            }))\n        )\n      },\n\n      context: {\n        list: [\"...\"],\n        indexForAddress: {\"...\": \"...\"},\n        indexForBinary: {\"...\": \"...\"},\n      },\n\n      trace: {\n        ...state.trace,\n        steps: [\"...\"]\n      }\n    })\n  });\n\n  let store = createStore(\n    reducer, initialState,\n\n    composeEnhancers(\n      applyMiddleware(\n        sagaMiddleware,\n        loggerMiddleware\n      )\n    )\n  );\n\n  sagaMiddleware.run(saga);\n\n  return store;\n}\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/store/common.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 265,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/store/common.js",
    "static": true,
    "longname": "lib/store/common.js~debug",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/store/common.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 266,
    "kind": "variable",
    "name": "reduxDebug",
    "memberof": "lib/store/common.js",
    "static": true,
    "longname": "lib/store/common.js~reduxDebug",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/store/common.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 267,
    "kind": "function",
    "name": "configureStore",
    "memberof": "lib/store/common.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/store/common.js~configureStore",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/store/common.js",
    "importStyle": "configureStore",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "reducer",
        "types": [
          "*"
        ]
      },
      {
        "name": "saga",
        "types": [
          "*"
        ]
      },
      {
        "name": "initialState",
        "types": [
          "*"
        ]
      },
      {
        "name": "composeEnhancers",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 268,
    "kind": "file",
    "name": "lib/store/development.js",
    "content": "import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:store:development\");\n\nimport { composeWithDevTools } from \"remote-redux-devtools\";\n\nimport commonConfigure from \"./common\";\n\nexport default function configureStore (reducer, saga, initialState) {\n  const composeEnhancers = composeWithDevTools({\n    realtime: true,\n    actionsBlacklist: [\n      \"RECEIVE_TRACE\", \"SCOPE\", \"DECLARE_VARIABLE\",\n      \"ASSIGN\", \"ADVANCE\", \"SAVE_STEPS\", \"BEGIN_STEP\", \"NEXT\"\n    ],\n    stateSanitizer: (state) => ({\n      session: state.session,\n      context: state.context,\n      evm: state.evm,\n      solidity: state.solidity,\n      data: state.data,\n    }),\n\n    port: 1117\n  });\n\n  return commonConfigure(reducer, saga, initialState, composeEnhancers);\n}\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/store/development.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 269,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/store/development.js",
    "static": true,
    "longname": "lib/store/development.js~debug",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/store/development.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 270,
    "kind": "function",
    "name": "configureStore",
    "memberof": "lib/store/development.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/store/development.js~configureStore",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/store/development.js",
    "importStyle": "configureStore",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "reducer",
        "types": [
          "*"
        ]
      },
      {
        "name": "saga",
        "types": [
          "*"
        ]
      },
      {
        "name": "initialState",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 271,
    "kind": "file",
    "name": "lib/store/index.js",
    "content": "if (process.env.NODE_ENV == \"production\") {\n  module.exports = require(\"./production\");\n} else if (process.env.NODE_ENV == \"test\") {\n  module.exports = require(\"./test\");\n} else {\n  module.exports = require(\"./development\");\n}\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/store/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 272,
    "kind": "file",
    "name": "lib/store/production.js",
    "content": "import configureStore from \"./common\";\nexport default configureStore;\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/store/production.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 273,
    "kind": "file",
    "name": "lib/store/test.js",
    "content": "import configureStore from \"./common\";\nexport default configureStore;\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/store/test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 274,
    "kind": "file",
    "name": "lib/trace/actions/index.js",
    "content": "export const SAVE_STEPS = \"SAVE_STEPS\";\nexport function saveSteps(steps) {\n  return {\n    type: SAVE_STEPS,\n    steps\n  };\n}\n\nexport const RECEIVE_ADDRESSES = \"RECEIVE_ADDRESSES\";\nexport function receiveAddresses(addresses) {\n  return {\n    type: RECEIVE_ADDRESSES,\n    addresses\n  };\n}\n\nexport const NEXT = \"NEXT\";\nexport function next() {\n  return {type: NEXT};\n}\n\nexport const TICK = \"TICK\";\nexport function tick() {\n  return {type: TICK};\n}\n\nexport const TOCK = \"TOCK\";\nexport function tock() {\n  return {type: TOCK};\n}\n\nexport const END_OF_TRACE = \"EOT\";\nexport function endTrace() {\n  return {type: END_OF_TRACE};\n}\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/trace/actions/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 275,
    "kind": "variable",
    "name": "SAVE_STEPS",
    "memberof": "lib/trace/actions/index.js",
    "static": true,
    "longname": "lib/trace/actions/index.js~SAVE_STEPS",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/trace/actions/index.js",
    "importStyle": "{SAVE_STEPS}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 276,
    "kind": "function",
    "name": "saveSteps",
    "memberof": "lib/trace/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/trace/actions/index.js~saveSteps",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/trace/actions/index.js",
    "importStyle": "{saveSteps}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "steps",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"steps\": *}"
      ]
    }
  },
  {
    "__docId__": 277,
    "kind": "variable",
    "name": "RECEIVE_ADDRESSES",
    "memberof": "lib/trace/actions/index.js",
    "static": true,
    "longname": "lib/trace/actions/index.js~RECEIVE_ADDRESSES",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/trace/actions/index.js",
    "importStyle": "{RECEIVE_ADDRESSES}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 278,
    "kind": "function",
    "name": "receiveAddresses",
    "memberof": "lib/trace/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/trace/actions/index.js~receiveAddresses",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/trace/actions/index.js",
    "importStyle": "{receiveAddresses}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "addresses",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"addresses\": *}"
      ]
    }
  },
  {
    "__docId__": 279,
    "kind": "variable",
    "name": "NEXT",
    "memberof": "lib/trace/actions/index.js",
    "static": true,
    "longname": "lib/trace/actions/index.js~NEXT",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/trace/actions/index.js",
    "importStyle": "{NEXT}",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 280,
    "kind": "function",
    "name": "next",
    "memberof": "lib/trace/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/trace/actions/index.js~next",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/trace/actions/index.js",
    "importStyle": "{next}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"type\": *}"
      ]
    }
  },
  {
    "__docId__": 281,
    "kind": "variable",
    "name": "TICK",
    "memberof": "lib/trace/actions/index.js",
    "static": true,
    "longname": "lib/trace/actions/index.js~TICK",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/trace/actions/index.js",
    "importStyle": "{TICK}",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 282,
    "kind": "function",
    "name": "tick",
    "memberof": "lib/trace/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/trace/actions/index.js~tick",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/trace/actions/index.js",
    "importStyle": "{tick}",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"type\": *}"
      ]
    }
  },
  {
    "__docId__": 283,
    "kind": "variable",
    "name": "TOCK",
    "memberof": "lib/trace/actions/index.js",
    "static": true,
    "longname": "lib/trace/actions/index.js~TOCK",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/trace/actions/index.js",
    "importStyle": "{TOCK}",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 284,
    "kind": "function",
    "name": "tock",
    "memberof": "lib/trace/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/trace/actions/index.js~tock",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/trace/actions/index.js",
    "importStyle": "{tock}",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"type\": *}"
      ]
    }
  },
  {
    "__docId__": 285,
    "kind": "variable",
    "name": "END_OF_TRACE",
    "memberof": "lib/trace/actions/index.js",
    "static": true,
    "longname": "lib/trace/actions/index.js~END_OF_TRACE",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/trace/actions/index.js",
    "importStyle": "{END_OF_TRACE}",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 286,
    "kind": "function",
    "name": "endTrace",
    "memberof": "lib/trace/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/trace/actions/index.js~endTrace",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/trace/actions/index.js",
    "importStyle": "{endTrace}",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"type\": *}"
      ]
    }
  },
  {
    "__docId__": 287,
    "kind": "file",
    "name": "lib/trace/reducers.js",
    "content": "import { combineReducers } from \"redux\";\n\nimport * as actions from \"./actions\";\n\nexport function index(state = 0, action) {\n  if (action.type == actions.TOCK || action.type == actions.END_OF_TRACE) {\n    return state + 1;\n  } else {\n    return state;\n  }\n}\n\nexport function steps(state = null, action) {\n  if (action.type == actions.SAVE_STEPS) {\n    return action.steps;\n  } else {\n    return state;\n  }\n}\n\nconst reducer = combineReducers({\n  index,\n  steps\n});\n\nexport default reducer;\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/trace/reducers.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 288,
    "kind": "function",
    "name": "index",
    "memberof": "lib/trace/reducers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/trace/reducers.js~index",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/trace/reducers.js",
    "importStyle": "{index}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0,
        "defaultValue": "0"
      },
      {
        "name": "action",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 289,
    "kind": "function",
    "name": "steps",
    "memberof": "lib/trace/reducers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/trace/reducers.js~steps",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/trace/reducers.js",
    "importStyle": "{steps}",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "optional": true,
        "types": [
          "undefined"
        ],
        "defaultValue": "undefined"
      },
      {
        "name": "action",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 290,
    "kind": "variable",
    "name": "reducer",
    "memberof": "lib/trace/reducers.js",
    "static": true,
    "longname": "lib/trace/reducers.js~reducer",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/trace/reducers.js",
    "importStyle": "reducer",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 291,
    "kind": "file",
    "name": "lib/trace/sagas/index.js",
    "content": "import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:trace:sagas\");\n\nimport { take, takeEvery, put, select } from \"redux-saga/effects\";\nimport { prefixName } from \"lib/helpers\";\n\nimport * as actions from \"../actions\";\n\nimport trace from \"../selectors\";\n\nfunction *waitForTrace() {\n  let {steps} = yield take(actions.SAVE_STEPS);\n\n  let addresses = [\n    ...new Set(\n      steps\n        .filter( ({op}) => op == \"CALL\" || op == \"DELEGATECALL\" )\n        .map( ({stack}) => \"0x\" + stack[stack.length - 2].substring(24) )\n    )\n  ];\n\n  yield put(actions.receiveAddresses(addresses));\n}\n\nexport function *advance() {\n  yield put(actions.next());\n\n  yield take(actions.TOCK);\n}\n\nfunction* next() {\n  let remaining = yield select(trace.stepsRemaining);\n  debug(\"remaining: %o\", remaining);\n  let steps = yield select(trace.steps);\n  debug(\"total steps: %o\", steps.length);\n\n  if (remaining > 0) {\n    debug(\"putting TICK\");\n    // updates state for current step\n    yield put(actions.tick());\n    debug(\"put TICK\");\n\n    remaining--; // local update, just for convenience\n  }\n\n  if (remaining) {\n    debug(\"putting TOCK\");\n    // updates step to next step in trace\n    yield put(actions.tock());\n    debug(\"put TOCK\");\n\n  } else {\n\n    yield put(actions.endTrace());\n  }\n}\n\nexport function* wait() {\n  yield take(actions.END_OF_TRACE);\n}\n\nexport function *processTrace(trace) {\n  yield put(actions.saveSteps(trace));\n\n  let {addresses} = yield take(actions.RECEIVE_ADDRESSES);\n  debug(\"received addresses\");\n\n  return addresses;\n}\n\nexport function* saga() {\n  // wait for trace to be defined\n  yield *waitForTrace();\n\n  yield takeEvery(actions.NEXT, next);\n}\n\nexport default prefixName(\"trace\", saga);\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/trace/sagas/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 292,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/trace/sagas/index.js",
    "static": true,
    "longname": "lib/trace/sagas/index.js~debug",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/trace/sagas/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 293,
    "kind": "function",
    "name": "waitForTrace",
    "memberof": "lib/trace/sagas/index.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/trace/sagas/index.js~waitForTrace",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/trace/sagas/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 294,
    "kind": "function",
    "name": "advance",
    "memberof": "lib/trace/sagas/index.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/trace/sagas/index.js~advance",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/trace/sagas/index.js",
    "importStyle": "{advance}",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 295,
    "kind": "function",
    "name": "next",
    "memberof": "lib/trace/sagas/index.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/trace/sagas/index.js~next",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/trace/sagas/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 296,
    "kind": "function",
    "name": "wait",
    "memberof": "lib/trace/sagas/index.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/trace/sagas/index.js~wait",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/trace/sagas/index.js",
    "importStyle": "{wait}",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 297,
    "kind": "function",
    "name": "processTrace",
    "memberof": "lib/trace/sagas/index.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/trace/sagas/index.js~processTrace",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/trace/sagas/index.js",
    "importStyle": "{processTrace}",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [
      {
        "name": "trace",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 298,
    "kind": "function",
    "name": "saga",
    "memberof": "lib/trace/sagas/index.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/trace/sagas/index.js~saga",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/trace/sagas/index.js",
    "importStyle": "{saga}",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 299,
    "kind": "file",
    "name": "lib/trace/selectors/index.js",
    "content": "import { createSelectorTree, createLeaf } from \"reselect-tree\";\n\nlet trace = createSelectorTree({\n  /**\n   * trace.index\n   *\n   * current step index\n   */\n  index: (state) => state.trace.index,\n\n  /**\n   * trace.steps\n   *\n   * all trace steps\n   */\n  steps: (state) => state.trace.steps,\n\n  /**\n   * trace.stepsRemaining\n   *\n   * number of steps remaining in trace\n   */\n  stepsRemaining: createLeaf(\n    [\"./steps\", \"./index\"], (steps, index) => steps.length - index\n  ),\n\n  /**\n   * trace.step\n   *\n   * current trace step\n   */\n  step: createLeaf(\n    [\"./steps\", \"./index\"], (steps, index) => steps[index]\n  ),\n\n  /**\n   * trace.next\n   *\n   * next trace step or {}\n   */\n  next: createLeaf(\n    [\"./steps\", \"./index\"], (steps, index) =>\n      index < steps.length - 1 ? steps[index + 1] : {}\n  )\n});\n\nexport default trace;\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/trace/selectors/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 300,
    "kind": "variable",
    "name": "trace",
    "memberof": "lib/trace/selectors/index.js",
    "static": true,
    "longname": "lib/trace/selectors/index.js~trace",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/trace/selectors/index.js",
    "importStyle": "trace",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 301,
    "kind": "file",
    "name": "lib/web3/actions/index.js",
    "content": "export const INIT_WEB3 = \"INIT_WEB3\";\nexport function init(provider) {\n  return {\n    type: INIT_WEB3,\n    provider\n  }\n}\n\nexport const INSPECT = \"INSPECT_TRANSACTION\";\nexport function inspect(txHash) {\n  return {\n    type: INSPECT,\n    txHash\n  }\n}\n\nexport const FETCH_BINARY = \"FETCH_BINARY\";\nexport function fetchBinary(address) {\n  return {\n    type: FETCH_BINARY,\n    address\n  };\n}\n\nexport const RECEIVE_BINARY = \"RECEIVE_BINARY\";\nexport function receiveBinary(address, binary) {\n  return {\n    type: RECEIVE_BINARY,\n    address, binary\n  }\n}\n\nexport const RECEIVE_TRACE = \"RECEIVE_TRACE\";\nexport function receiveTrace(trace) {\n  return {\n    type: RECEIVE_TRACE,\n    trace\n  }\n}\n\nexport const RECEIVE_CALL = \"RECEIVE_CALL\";\nexport function receiveCall({address, binary}) {\n  return {\n    type: RECEIVE_CALL,\n    address, binary\n  }\n}\n\nexport const ERROR_WEB3 = \"ERROR_WEB3\";\nexport function error(error) {\n  return {\n    type: ERROR_WEB3,\n    error\n  };\n}\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/web3/actions/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 302,
    "kind": "variable",
    "name": "INIT_WEB3",
    "memberof": "lib/web3/actions/index.js",
    "static": true,
    "longname": "lib/web3/actions/index.js~INIT_WEB3",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/web3/actions/index.js",
    "importStyle": "{INIT_WEB3}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 303,
    "kind": "function",
    "name": "init",
    "memberof": "lib/web3/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/web3/actions/index.js~init",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/web3/actions/index.js",
    "importStyle": "{init}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "provider",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"provider\": *}"
      ]
    }
  },
  {
    "__docId__": 304,
    "kind": "variable",
    "name": "INSPECT",
    "memberof": "lib/web3/actions/index.js",
    "static": true,
    "longname": "lib/web3/actions/index.js~INSPECT",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/web3/actions/index.js",
    "importStyle": "{INSPECT}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 305,
    "kind": "function",
    "name": "inspect",
    "memberof": "lib/web3/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/web3/actions/index.js~inspect",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/web3/actions/index.js",
    "importStyle": "{inspect}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "txHash",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"txHash\": *}"
      ]
    }
  },
  {
    "__docId__": 306,
    "kind": "variable",
    "name": "FETCH_BINARY",
    "memberof": "lib/web3/actions/index.js",
    "static": true,
    "longname": "lib/web3/actions/index.js~FETCH_BINARY",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/web3/actions/index.js",
    "importStyle": "{FETCH_BINARY}",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 307,
    "kind": "function",
    "name": "fetchBinary",
    "memberof": "lib/web3/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/web3/actions/index.js~fetchBinary",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/web3/actions/index.js",
    "importStyle": "{fetchBinary}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "address",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"address\": *}"
      ]
    }
  },
  {
    "__docId__": 308,
    "kind": "variable",
    "name": "RECEIVE_BINARY",
    "memberof": "lib/web3/actions/index.js",
    "static": true,
    "longname": "lib/web3/actions/index.js~RECEIVE_BINARY",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/web3/actions/index.js",
    "importStyle": "{RECEIVE_BINARY}",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 309,
    "kind": "function",
    "name": "receiveBinary",
    "memberof": "lib/web3/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/web3/actions/index.js~receiveBinary",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/web3/actions/index.js",
    "importStyle": "{receiveBinary}",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "address",
        "types": [
          "*"
        ]
      },
      {
        "name": "binary",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"address\": *, \"binary\": *}"
      ]
    }
  },
  {
    "__docId__": 310,
    "kind": "variable",
    "name": "RECEIVE_TRACE",
    "memberof": "lib/web3/actions/index.js",
    "static": true,
    "longname": "lib/web3/actions/index.js~RECEIVE_TRACE",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/web3/actions/index.js",
    "importStyle": "{RECEIVE_TRACE}",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 311,
    "kind": "function",
    "name": "receiveTrace",
    "memberof": "lib/web3/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/web3/actions/index.js~receiveTrace",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/web3/actions/index.js",
    "importStyle": "{receiveTrace}",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [
      {
        "name": "trace",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"trace\": *}"
      ]
    }
  },
  {
    "__docId__": 312,
    "kind": "variable",
    "name": "RECEIVE_CALL",
    "memberof": "lib/web3/actions/index.js",
    "static": true,
    "longname": "lib/web3/actions/index.js~RECEIVE_CALL",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/web3/actions/index.js",
    "importStyle": "{RECEIVE_CALL}",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 313,
    "kind": "function",
    "name": "receiveCall",
    "memberof": "lib/web3/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/web3/actions/index.js~receiveCall",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/web3/actions/index.js",
    "importStyle": "{receiveCall}",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"address\": *, \"binary\": *}"
        ],
        "defaultRaw": {
          "address": null,
          "binary": null
        },
        "defaultValue": "{\"address\":null,\"binary\":null}"
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"address\": *, \"binary\": *}"
      ]
    }
  },
  {
    "__docId__": 314,
    "kind": "variable",
    "name": "ERROR_WEB3",
    "memberof": "lib/web3/actions/index.js",
    "static": true,
    "longname": "lib/web3/actions/index.js~ERROR_WEB3",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/web3/actions/index.js",
    "importStyle": "{ERROR_WEB3}",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 315,
    "kind": "function",
    "name": "error",
    "memberof": "lib/web3/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/web3/actions/index.js~error",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/web3/actions/index.js",
    "importStyle": "{error}",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "error",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"error\": *}"
      ]
    }
  },
  {
    "__docId__": 316,
    "kind": "file",
    "name": "lib/web3/adapter.js",
    "content": "import debugModule from \"debug\";\n\nimport Web3 from \"web3\";\n\nconst debug = debugModule(\"debugger:web3:adapter\");\n\nexport default class Web3Adapter {\n  constructor(provider) {\n    this.web3 = new Web3(provider);\n  }\n\n  async getTrace(txHash) {\n    return new Promise( (accept, reject) => {\n      this.web3.currentProvider.sendAsync({\n        jsonrpc: \"2.0\",\n        method: \"debug_traceTransaction\",\n        params: [txHash, {}],\n        id: new Date().getTime()\n      }, (err, result) => {\n        if (err) return reject(err);\n        if (result.error) return reject(new Error(result.error.message));\n        debug(\"result: %o\", result);\n        accept(result.result.structLogs);\n      });\n    });\n  };\n\n  async getTransaction(txHash) {\n    return new Promise( (accept, reject) => {\n      this.web3.eth.getTransaction(txHash, (err, tx) => {\n        if (err) return reject(err);\n\n        return accept(tx);\n      });\n    });\n  };\n\n  async getReceipt(txHash) {\n    return new Promise( (accept, reject) => {\n      this.web3.eth.getTransactionReceipt(txHash, (err, receipt) => {\n        if (err) return reject(err);\n\n        return accept(receipt);\n      });\n    });\n  };\n\n  /**\n   * getDeployedCode - get the deployed code for an address from the client\n   * @param  {String} address\n   * @return {String}         deployedBinary\n   */\n  async getDeployedCode(address) {\n    debug(\"getting deployed code for %s\", address);\n    return new Promise((accept, reject) => {\n      this.web3.eth.getCode(address, (err, deployedBinary) => {\n        if (err) debug(\"error: %o\", err);\n        if (err) return reject(err);\n        debug(\"got deployed code for %s\", address);\n        accept(deployedBinary);\n      });\n    });\n  };\n}\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/web3/adapter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 317,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/web3/adapter.js",
    "static": true,
    "longname": "lib/web3/adapter.js~debug",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/web3/adapter.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 318,
    "kind": "class",
    "name": "Web3Adapter",
    "memberof": "lib/web3/adapter.js",
    "static": true,
    "longname": "lib/web3/adapter.js~Web3Adapter",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/web3/adapter.js",
    "importStyle": "Web3Adapter",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 319,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/web3/adapter.js~Web3Adapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/web3/adapter.js~Web3Adapter#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 320,
    "kind": "member",
    "name": "web3",
    "memberof": "lib/web3/adapter.js~Web3Adapter",
    "static": false,
    "longname": "lib/web3/adapter.js~Web3Adapter#web3",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 321,
    "kind": "method",
    "name": "getTrace",
    "memberof": "lib/web3/adapter.js~Web3Adapter",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/web3/adapter.js~Web3Adapter#getTrace",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "txHash",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 322,
    "kind": "method",
    "name": "getTransaction",
    "memberof": "lib/web3/adapter.js~Web3Adapter",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/web3/adapter.js~Web3Adapter#getTransaction",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [
      {
        "name": "txHash",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 323,
    "kind": "method",
    "name": "getReceipt",
    "memberof": "lib/web3/adapter.js~Web3Adapter",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/web3/adapter.js~Web3Adapter#getReceipt",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "txHash",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 324,
    "kind": "method",
    "name": "getDeployedCode",
    "memberof": "lib/web3/adapter.js~Web3Adapter",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/web3/adapter.js~Web3Adapter#getDeployedCode",
    "access": "public",
    "description": "getDeployedCode - get the deployed code for an address from the client",
    "lineNumber": 53,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "address",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "deployedBinary"
    }
  },
  {
    "__docId__": 325,
    "kind": "file",
    "name": "lib/web3/sagas/index.js",
    "content": "import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:web3:sagas\");\n\nimport { all, takeEvery, apply, fork, join, take, put, select } from 'redux-saga/effects';\nimport { prefixName } from \"lib/helpers\";\n\nimport * as actions from \"../actions\";\n\nimport Web3Adapter from \"../adapter\";\n\nfunction* fetchTransactionInfo(adapter, {txHash}) {\n  debug(\"inspecting transaction\");\n  var trace;\n  try {\n    trace = yield apply(adapter, adapter.getTrace, [txHash]);\n  } catch(e) {\n    debug(\"putting error\");\n    yield put(actions.error(e));\n    return;\n  }\n\n  debug(\"got trace\");\n  yield put(actions.receiveTrace(trace));\n\n  let tx = yield apply(adapter, adapter.getTransaction, [txHash]);\n  if (tx.to && tx.to != \"0x0\") {\n    yield put(actions.receiveCall({address: tx.to}));\n    return;\n  }\n\n  let receipt = yield apply(adapter, adapter.getReceipt, [txHash]);\n  if (receipt.contractAddress) {\n    yield put(actions.receiveCall({binary: receipt.input}));\n    return;\n  }\n\n  throw new Error(\n    \"Could not find contract associated with transaction. \" +\n    \"Please make sure you're debugging a transaction that executes a \" +\n    \"contract function or creates a new contract.\"\n  );\n}\n\nfunction* fetchBinary(adapter, {address}) {\n  debug(\"fetching binary for %s\", address);\n  let binary = yield apply(adapter, adapter.getDeployedCode, [address]);\n\n  debug(\"received binary for %s\", address);\n  yield put(actions.receiveBinary(address, binary));\n}\n\nexport function *inspectTransaction(txHash, provider) {\n  yield put(actions.init(provider));\n  yield put(actions.inspect(txHash));\n\n  let action = yield take( ({type}) =>\n    type == actions.RECEIVE_TRACE || type == actions.ERROR_WEB3\n  );\n  debug(\"action %o\", action);\n\n  var trace;\n  if (action.type == actions.RECEIVE_TRACE) {\n    trace = action.trace;\n    debug(\"received trace\");\n  } else {\n    return { error: action.error };\n  }\n\n  let {address, binary} = yield take(actions.RECEIVE_CALL);\n  debug(\"received call\");\n\n  return { trace, address, binary };\n}\n\nexport function *obtainBinaries(addresses) {\n  let tasks = yield all(\n    addresses.map( (address) => fork(receiveBinary, address) )\n  );\n\n  debug(\"requesting binaries\");\n  yield all(\n    addresses.map( (address) => put(actions.fetchBinary(address)) )\n  );\n\n  let binaries = [];\n  binaries = yield all(\n    tasks.map(task => join(task))\n  );\n\n  debug(\"binaries %o\", binaries);\n\n  return binaries;\n}\n\nfunction *receiveBinary(address) {\n  let {binary} = yield take((action) => (\n    action.type == actions.RECEIVE_BINARY &&\n    action.address == address\n  ));\n  debug(\"got binary for %s\", address);\n\n  return binary;\n}\n\nexport function* saga() {\n  // wait for web3 init signal\n  let {provider} = yield take(actions.INIT_WEB3);\n  let adapter = new Web3Adapter(provider);\n\n  yield takeEvery(actions.INSPECT, fetchTransactionInfo, adapter);\n  yield takeEvery(actions.FETCH_BINARY, fetchBinary, adapter);\n}\n\nexport default prefixName(\"web3\", saga);\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/web3/sagas/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 326,
    "kind": "variable",
    "name": "debug",
    "memberof": "lib/web3/sagas/index.js",
    "static": true,
    "longname": "lib/web3/sagas/index.js~debug",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/web3/sagas/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 327,
    "kind": "function",
    "name": "fetchTransactionInfo",
    "memberof": "lib/web3/sagas/index.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/web3/sagas/index.js~fetchTransactionInfo",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/web3/sagas/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "adapter",
        "types": [
          "*"
        ]
      },
      {
        "name": "objectPattern1",
        "types": [
          "{\"txHash\": *}"
        ],
        "defaultRaw": {
          "txHash": null
        },
        "defaultValue": "{\"txHash\":null}"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 328,
    "kind": "function",
    "name": "fetchBinary",
    "memberof": "lib/web3/sagas/index.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/web3/sagas/index.js~fetchBinary",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/web3/sagas/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [
      {
        "name": "adapter",
        "types": [
          "*"
        ]
      },
      {
        "name": "objectPattern1",
        "types": [
          "{\"address\": *}"
        ],
        "defaultRaw": {
          "address": null
        },
        "defaultValue": "{\"address\":null}"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 329,
    "kind": "function",
    "name": "inspectTransaction",
    "memberof": "lib/web3/sagas/index.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/web3/sagas/index.js~inspectTransaction",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/web3/sagas/index.js",
    "importStyle": "{inspectTransaction}",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "txHash",
        "types": [
          "*"
        ]
      },
      {
        "name": "provider",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"trace\": *, \"address\": *, \"binary\": *}"
      ]
    }
  },
  {
    "__docId__": 330,
    "kind": "function",
    "name": "obtainBinaries",
    "memberof": "lib/web3/sagas/index.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/web3/sagas/index.js~obtainBinaries",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/web3/sagas/index.js",
    "importStyle": "{obtainBinaries}",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "params": [
      {
        "name": "addresses",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 331,
    "kind": "function",
    "name": "receiveBinary",
    "memberof": "lib/web3/sagas/index.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/web3/sagas/index.js~receiveBinary",
    "access": "public",
    "export": false,
    "importPath": "truffle-debugger/lib/web3/sagas/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "params": [
      {
        "name": "address",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 332,
    "kind": "function",
    "name": "saga",
    "memberof": "lib/web3/sagas/index.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "lib/web3/sagas/index.js~saga",
    "access": "public",
    "export": true,
    "importPath": "truffle-debugger/lib/web3/sagas/index.js",
    "importStyle": "{saga}",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "kind": "index",
    "content": "# truffle-debugger\n\nPortable Solidity debugger library, for use with or without Truffle.\n\n![Debugger in Action](https://i.imgur.com/0j5m4KW.gif)\n\nFeatures:\n- Solidity stepping and breakpoints\n- Variable inspection\n- Watch expressions\n- and more!\n\n## API Documentation\n\nAPI Documentation for this library can be found at [truffleframework.com/truffle-debugger](http://truffleframework.com/truffle-debugger/).\n\n## Library Usage\n\n_:warning: This documentation is currently a work in progress.\nPlease see the [reference integration](https://github.com/trufflesuite/truffle-core/blob/develop/lib/commands/debug.js) provided by the `truffle debug` command._\n\n### Required Parameters\n\nTo start a truffle-debugger session, you'll need the following:\n\n- `txHash` - a transaction hash (prefixed with `0x`), for the transaction to debug\n- `provider` - a web3 provider instance (see [web3.js](https://github.com/ethereum/web3.js/)\n- `contracts` -  an array of contract objects, with the following properties:\n  - `contractName` - the name of the contract\n  - `source` - the full Solidity source code\n  - `sourcePath` - (optional) the path to the Solidity file on disk\n  - `ast` - The Solidity compiler's output AST (new style, not `legacyAST`)\n  - `binary` - `0x`-prefixed string with the binary used to create a contract instance\n  - `sourceMap` - the Solidity compiler output source map for the creation binary\n  - `deployedBinary` - `0x`-prefixed string with the on-chain binary for a contract instance\n  - `deployedSourceMap` - source map corresponding to the on-chain binary (from the Solidity compiler)\n\n### Invocation\n\n1. Start the debugger session by constructing a Debugger instance with `.forTx()` and then `.connect()` to it:\n\n```javascript\nimport Debugger from \"truffle-debugger\";\n\nlet session = Debugger\n  .forTx(txHash, { contracts, provider })\n  .connect();\n```\n\n2. Resolve the session's `ready()` promise:\n\n```javascript\nawait session.ready();\n```\n\n3. Use the provided public methods on the `session` instance in order to step through the trace for the transaction:\n\n```javascript\nsession.stepNext();\nsession.stepOver();\nsession.stepInfo();\n```\n\n4. Access data provided by the debugger via the `session.view()` interface, and the provided selectors:\n\n```javascript\nlet { ast, context, data, evm, solidity, trace } = Debugger.selectors;\n\nlet variables = session.view(data.identifiers.native.current);\nlet sourceRange = session.view(solidity.next.sourceRange);\n```\n\n### Useful API Docs References\n\n- [**`Session` class docs**](http://truffleframework.com/truffle-debugger/class/lib/session/index.js~Session.html)\n- **Docs for selectors:**\n  - [**`ast` selectors**](http://truffleframework.com/truffle-debugger/identifiers.html#ast-selectors)\n  - [**`context` selectors**](http://truffleframework.com/truffle-debugger/identifiers.html#context-selectors)\n  - [**`data` selectors**](http://truffleframework.com/truffle-debugger/identifiers.html#data-selectors)\n  - [**`evm` selectors**](http://truffleframework.com/truffle-debugger/identifiers.html#evm-selectors)\n  - [**`solidity` selectors**](http://truffleframework.com/truffle-debugger/identifiers.html#solidity-selectors)\n  - [**`trace` selectors**](http://truffleframework.com/truffle-debugger/identifiers.html#trace-selectors)\n\n## Contributing\n\nIt's our goal that this library should serve as a reliable and well-maintained tool for the Solidity ecosystem. Ultimately, we hope to support all language features and meet the varied requirements of a mature debugging library.\n\nWe believe that a good Solidity debugger belongs to the community. We welcome, with our most humble gratitude, any and all community efforts in bringing this debugger closer to that goal. If you find something broken or missing, please open an issue!\n\nSome other ideas for how to get involved:\n- Bug fix PRs\n- Documentation improvements\n- Additional tests - unit tests and integration\n- Technical discussion (ways to improve architecture, etc.)\n\nThank you for all the continued support. :bow:\n",
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"truffle-debugger\",\n  \"version\": \"2.0.3\",\n  \"description\": \"Core functionality for debugging Solidity files built with Truffle\",\n  \"main\": \"dist/debugger.js\",\n  \"scripts\": {\n    \"docs\": \"esdoc\",\n    \"build\": \"webpack --config webpack/webpack.config.js\",\n    \"start\": \"node ./webpack/dev-server.js\",\n    \"test\": \"mocha-webpack --webpack-config webpack/webpack.config-test.js --recursive\",\n    \"test:debug\": \"node --inspect ./node_modules/.bin/mocha-webpack --webpack-config webpack/webpack.config-test.js\"\n  },\n  \"keywords\": [\n    \"ethereum\",\n    \"truffle\",\n    \"debugger\",\n    \"solidity\"\n  ],\n  \"author\": \"Tim Coulter <tim.coulter@consenseys.net>\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"bignumber.js\": \"^6.0.0\",\n    \"debug\": \"^3.1.0\",\n    \"json-pointer\": \"^0.6.0\",\n    \"node-interval-tree\": \"^1.3.3\",\n    \"redux\": \"^3.7.2\",\n    \"redux-cli-logger\": \"^2.0.1\",\n    \"redux-saga\": \"^0.16.0\",\n    \"remote-redux-devtools\": \"^0.5.12\",\n    \"reselect-tree\": \"^1.1.3\",\n    \"truffle-code-utils\": \"^1.1.0\",\n    \"truffle-expect\": \"0.0.3\",\n    \"truffle-solidity-utils\": \"^1.1.0\",\n    \"web3\": \"^0.20.2\",\n    \"web3-eth-abi\": \"^1.0.0-beta.29\"\n  },\n  \"devDependencies\": {\n    \"async\": \"^1.5.2\",\n    \"babel-core\": \"^6.26.0\",\n    \"babel-loader\": \"^7.1.2\",\n    \"babel-plugin-transform-object-rest-spread\": \"^6.26.0\",\n    \"babel-plugin-transform-runtime\": \"^6.23.0\",\n    \"babel-preset-env\": \"^1.6.1\",\n    \"babel-runtime\": \"^6.26.0\",\n    \"esdoc\": \"^1.0.4\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"express\": \"^4.16.2\",\n    \"fs-extra\": \"^4.0.2\",\n    \"ganache-cli\": \"^6.1.0-beta.4\",\n    \"mocha\": \"^4.0.1\",\n    \"mocha-webpack\": \"^1.0.1\",\n    \"remotedev-server\": \"^0.2.4\",\n    \"truffle-artifactor\": \"^3.0.0\",\n    \"truffle-box\": \"^1.0.3\",\n    \"truffle-debug-utils\": \"^1.0.1\",\n    \"truffle-migrate\": \"^2.0.0\",\n    \"truffle-resolver\": \"^4.0.1\",\n    \"truffle-workflow-compile\": \"^1.0.0\",\n    \"webpack\": \"^3.8.1\",\n    \"webpack-dev-middleware\": \"^2.0.4\",\n    \"webpack-merge\": \"^4.1.1\",\n    \"webpack-node-externals\": \"^1.6.0\",\n    \"write-file-webpack-plugin\": \"^4.2.0\"\n  }\n}\n",
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 333,
    "kind": "file",
    "name": "lib/ast/selectors/index.js",
    "content": "import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:ast:selectors\");\n\nimport { createSelectorTree, createLeaf } from \"reselect-tree\";\nimport jsonpointer from \"json-pointer\";\n\nimport context from \"lib/context/selectors\";\nimport solidity from \"lib/solidity/selectors\";\n\nimport { findRange } from \"../map\";\n\n\n/**\n * ast\n */\nconst ast = createSelectorTree({\n  /**\n   * ast.views\n   */\n  views: {\n    /**\n     * ast.views.contexts\n     */\n    contexts: createLeaf([context.list], cs => cs)\n  },\n\n  /**\n   * ast.current\n   */\n  current: {\n\n    /**\n     * ast.current.tree\n     *\n     * ast for current context\n     */\n    tree: createLeaf(\n      [context.current], (context) => context.ast\n    ),\n\n    /**\n     * ast.current.index\n     *\n     * index in context list\n     */\n    index: createLeaf(\n      [context.current, context.indexBy.binary], (context, indexBy) =>\n        indexBy(context.binary)\n    )\n  },\n\n  /**\n   * ast.by\n   *\n   * ast lookups\n   */\n  by: {\n\n    /**\n     * ast.by.index\n     *\n     * ast for context index\n     */\n    index: createLeaf(\n      [context.list], (list) => list.map( (context) => context.ast )\n    ),\n\n    /**\n     * ast.by.address\n     *\n     * ast for context with address\n     */\n    address: createLeaf(\n      [context.by.address],\n\n      (contexts) => ({\n        ...Object.assign(\n          {},\n          ...Object.entries(contexts)\n            .map( ([address, context]) => ({ [address]: context.ast }) )\n        )\n      })\n    ),\n\n    /**\n     * ast.by.binary\n     *\n     * ast for context with binary\n     */\n    binary: createLeaf(\n      [context.by.binary],\n\n      (contexts) => ({\n        ...Object.assign(\n          {},\n          ...Object.entries(contexts)\n            .map( ([binary, context]) => ({ [binary]: context.ast }) )\n        )\n      })\n    ),\n  },\n\n  /**\n   * ast.next\n   */\n  next: {\n\n    /**\n     * ast.next.pointer\n     *\n     * jsonpointer for next ast node\n     */\n    pointer: createLeaf(\n      [\"/current/tree\", solidity.next.sourceRange], (ast, range) =>\n        findRange(ast, range.start, range.length)\n    ),\n\n    /**\n     * ast.next.node\n     *\n     * next ast node to execute\n     */\n    node: createLeaf(\n      [\"/current/tree\", \"./pointer\"], (ast, pointer) =>\n        jsonpointer.get(ast, pointer)\n    ),\n\n  }\n});\n\nexport default ast;\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/ast/selectors/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 334,
    "kind": "function",
    "name": "ast",
    "selectorId": 0,
    "memberof": "lib/ast/selectors/index.js",
    "selectorDepth": 0,
    "static": true,
    "longname": "lib/ast/selectors/index.js~ast",
    "access": "public",
    "description": "ast",
    "lineNumber": 16,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 335,
    "kind": "function",
    "name": "ast.views",
    "selectorId": 1,
    "memberof": "lib/ast/selectors/index.js~ast",
    "selectorDepth": 1,
    "static": true,
    "longname": "lib/ast/selectors/index.js~ast.ast.views",
    "access": "public",
    "description": "ast.views",
    "lineNumber": 20,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 336,
    "kind": "function",
    "name": "ast.views.contexts",
    "selectorId": 2,
    "memberof": "lib/ast/selectors/index.js~ast.views",
    "selectorDepth": 2,
    "static": true,
    "longname": "lib/ast/selectors/index.js~ast.views.ast.views.contexts",
    "access": "public",
    "description": "ast.views.contexts",
    "lineNumber": 24,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 337,
    "kind": "function",
    "name": "ast.current",
    "selectorId": 3,
    "memberof": "lib/ast/selectors/index.js~ast",
    "selectorDepth": 1,
    "static": true,
    "longname": "lib/ast/selectors/index.js~ast.ast.current",
    "access": "public",
    "description": "ast.current",
    "lineNumber": 30,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 338,
    "kind": "function",
    "name": "ast.current.tree",
    "selectorId": 4,
    "memberof": "lib/ast/selectors/index.js~ast.current",
    "selectorDepth": 2,
    "static": true,
    "longname": "lib/ast/selectors/index.js~ast.current.ast.current.tree",
    "access": "public",
    "description": "ast.current.tree\n\nast for current context",
    "lineNumber": 37,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 339,
    "kind": "function",
    "name": "ast.current.index",
    "selectorId": 5,
    "memberof": "lib/ast/selectors/index.js~ast.current",
    "selectorDepth": 2,
    "static": true,
    "longname": "lib/ast/selectors/index.js~ast.current.ast.current.index",
    "access": "public",
    "description": "ast.current.index\n\nindex in context list",
    "lineNumber": 46,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 340,
    "kind": "function",
    "name": "ast.by",
    "selectorId": 6,
    "memberof": "lib/ast/selectors/index.js~ast",
    "selectorDepth": 1,
    "static": true,
    "longname": "lib/ast/selectors/index.js~ast.ast.by",
    "access": "public",
    "description": "ast.by\n\nast lookups",
    "lineNumber": 57,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 341,
    "kind": "function",
    "name": "ast.by.index",
    "selectorId": 7,
    "memberof": "lib/ast/selectors/index.js~ast.by",
    "selectorDepth": 2,
    "static": true,
    "longname": "lib/ast/selectors/index.js~ast.by.ast.by.index",
    "access": "public",
    "description": "ast.by.index\n\nast for context index",
    "lineNumber": 64,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 342,
    "kind": "function",
    "name": "ast.by.address",
    "selectorId": 8,
    "memberof": "lib/ast/selectors/index.js~ast.by",
    "selectorDepth": 2,
    "static": true,
    "longname": "lib/ast/selectors/index.js~ast.by.ast.by.address",
    "access": "public",
    "description": "ast.by.address\n\nast for context with address",
    "lineNumber": 73,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 343,
    "kind": "function",
    "name": "ast.by.binary",
    "selectorId": 9,
    "memberof": "lib/ast/selectors/index.js~ast.by",
    "selectorDepth": 2,
    "static": true,
    "longname": "lib/ast/selectors/index.js~ast.by.ast.by.binary",
    "access": "public",
    "description": "ast.by.binary\n\nast for context with binary",
    "lineNumber": 90,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 344,
    "kind": "function",
    "name": "ast.next",
    "selectorId": 10,
    "memberof": "lib/ast/selectors/index.js~ast",
    "selectorDepth": 1,
    "static": true,
    "longname": "lib/ast/selectors/index.js~ast.ast.next",
    "access": "public",
    "description": "ast.next",
    "lineNumber": 106,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 345,
    "kind": "function",
    "name": "ast.next.pointer",
    "selectorId": 11,
    "memberof": "lib/ast/selectors/index.js~ast.next",
    "selectorDepth": 2,
    "static": true,
    "longname": "lib/ast/selectors/index.js~ast.next.ast.next.pointer",
    "access": "public",
    "description": "ast.next.pointer\n\njsonpointer for next ast node",
    "lineNumber": 113,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 346,
    "kind": "function",
    "name": "ast.next.node",
    "selectorId": 12,
    "memberof": "lib/ast/selectors/index.js~ast.next",
    "selectorDepth": 2,
    "static": true,
    "longname": "lib/ast/selectors/index.js~ast.next.ast.next.node",
    "access": "public",
    "description": "ast.next.node\n\nnext ast node to execute",
    "lineNumber": 123,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 347,
    "kind": "file",
    "name": "lib/context/selectors/index.js",
    "content": "import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:context:selectors\");\n\nimport { createSelectorTree, createLeaf } from \"reselect-tree\";\n\nimport evm from \"lib/evm/selectors\";\n\nconst WORD_SIZE = 0x20;\n\nconst contexts = (state) => {\n  const defaultView = {\n    list: [],\n    indexForAddress: {},\n    indexForBinary: {}\n  };\n\n  return state.context || defaultView;\n};\n\nconst context = createSelectorTree({\n  /**\n   * context.list\n   *\n   * list of all contexts\n   */\n  list: createLeaf([contexts], (contexts) => contexts.list),\n\n  /**\n   * context.by\n   */\n  by: {\n\n    /**\n     * context.by.address\n     *\n     * object (address => context)\n     */\n    address: createLeaf(\n      [contexts, \"../indexBy/address\"],\n\n      (contexts, contextIndexBy) => (\n        (address) => contexts && contexts.list[ contextIndexBy(address) ]\n      )\n    ),\n\n    /**\n     * context.by.binary\n     *\n     * object (binary => context)\n     */\n    binary: createLeaf(\n      [contexts, \"../indexBy/binary\"],\n\n      (contexts, contextIndexBy) => (\n        (binary) => contexts && contexts.list[ contextIndexBy(binary) ]\n      )\n    )\n  },\n\n  /**\n   * context.indexBy\n   */\n  indexBy: {\n\n    /**\n     * context.indexBy.address\n     *\n     * object (address => context list index)\n     */\n    address: createLeaf(\n      [contexts],\n\n      (contexts) => (\n        (address) => {\n          const { _next, ...map } = contexts.indexForAddress;\n          return map[address];\n        }\n      )\n    ),\n\n    /**\n     * context.indexBy.binary\n     *\n     * object (binary => context list index)\n     */\n    binary: createLeaf(\n      [contexts],\n\n      (contexts) => (\n        (binary) => {\n          // trim off possible constructor args, one word at a time\n          // HACK until there's better CREATE semantics\n          let index = undefined;\n          while (index === undefined && binary) {\n            index = contexts.indexForBinary[binary];\n            binary = binary.slice(0, -(WORD_SIZE * 2));\n          }\n\n          return index;\n        }\n      )\n    )\n  },\n\n  /**\n   * context.current\n   */\n  current: createLeaf(\n    [evm.current.call, \"./by\"],\n\n    ({address, binary}, contextBy) => {\n      if (address) {\n        return contextBy.address(address);\n      } else {\n        return contextBy.binary(binary);\n      }\n    }\n  ),\n\n  /**\n   * context.affectedInstances\n   *\n   * contexts interacted with in trace\n   */\n  affectedInstances: createLeaf(\n    [contexts],\n\n    ({list, indexForAddress}) => {\n      let map = {};\n\n      for (let address of Object.keys(indexForAddress)) {\n        if (address === \"_next\") continue;\n\n        let index = indexForAddress[address];\n        let context = list[index];\n\n        map[address] = {\n          contractName: context.contractName,\n          source: context.source,\n          binary: context.binary\n        };\n      }\n\n      return map;\n    }\n  ),\n\n  /**\n   * context.missingSources\n   *\n   * contexts without source defined\n   */\n  missingSources: createLeaf(\n    ['./affectedInstances'],\n\n    (instances) => Object.entries(instances)\n      .filter(([address, instance]) => !instance.source)\n      .map(([address, instance]) => address)\n  )\n});\n\nexport default context;\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/context/selectors/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 348,
    "kind": "function",
    "name": "list",
    "selectorId": 13,
    "memberof": "lib/context/selectors/index.js",
    "selectorDepth": 0,
    "static": true,
    "longname": "lib/context/selectors/index.js~list",
    "access": "public",
    "description": "context.list\n\nlist of all contexts",
    "lineNumber": 26,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 349,
    "kind": "function",
    "name": "by",
    "selectorId": 14,
    "memberof": "lib/context/selectors/index.js",
    "selectorDepth": 0,
    "static": true,
    "longname": "lib/context/selectors/index.js~by",
    "access": "public",
    "description": "context.by",
    "lineNumber": 31,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 350,
    "kind": "function",
    "name": "by.address",
    "selectorId": 15,
    "memberof": "lib/context/selectors/index.js~by",
    "selectorDepth": 1,
    "static": true,
    "longname": "lib/context/selectors/index.js~by.by.address",
    "access": "public",
    "description": "context.by.address\n\nobject (address => context)",
    "lineNumber": 38,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 351,
    "kind": "function",
    "name": "by.binary",
    "selectorId": 16,
    "memberof": "lib/context/selectors/index.js~by",
    "selectorDepth": 1,
    "static": true,
    "longname": "lib/context/selectors/index.js~by.by.binary",
    "access": "public",
    "description": "context.by.binary\n\nobject (binary => context)",
    "lineNumber": 51,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 352,
    "kind": "function",
    "name": "indexBy",
    "selectorId": 17,
    "memberof": "lib/context/selectors/index.js",
    "selectorDepth": 0,
    "static": true,
    "longname": "lib/context/selectors/index.js~indexBy",
    "access": "public",
    "description": "context.indexBy",
    "lineNumber": 63,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 353,
    "kind": "function",
    "name": "indexBy.address",
    "selectorId": 18,
    "memberof": "lib/context/selectors/index.js~indexBy",
    "selectorDepth": 1,
    "static": true,
    "longname": "lib/context/selectors/index.js~indexBy.indexBy.address",
    "access": "public",
    "description": "context.indexBy.address\n\nobject (address => context list index)",
    "lineNumber": 70,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 354,
    "kind": "function",
    "name": "indexBy.binary",
    "selectorId": 19,
    "memberof": "lib/context/selectors/index.js~indexBy",
    "selectorDepth": 1,
    "static": true,
    "longname": "lib/context/selectors/index.js~indexBy.indexBy.binary",
    "access": "public",
    "description": "context.indexBy.binary\n\nobject (binary => context list index)",
    "lineNumber": 86,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 355,
    "kind": "function",
    "name": "current",
    "selectorId": 20,
    "memberof": "lib/context/selectors/index.js",
    "selectorDepth": 0,
    "static": true,
    "longname": "lib/context/selectors/index.js~current",
    "access": "public",
    "description": "context.current",
    "lineNumber": 108,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 356,
    "kind": "function",
    "name": "affectedInstances",
    "selectorId": 21,
    "memberof": "lib/context/selectors/index.js",
    "selectorDepth": 0,
    "static": true,
    "longname": "lib/context/selectors/index.js~affectedInstances",
    "access": "public",
    "description": "context.affectedInstances\n\ncontexts interacted with in trace",
    "lineNumber": 125,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 357,
    "kind": "function",
    "name": "missingSources",
    "selectorId": 22,
    "memberof": "lib/context/selectors/index.js",
    "selectorDepth": 0,
    "static": true,
    "longname": "lib/context/selectors/index.js~missingSources",
    "access": "public",
    "description": "context.missingSources\n\ncontexts without source defined",
    "lineNumber": 153,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 358,
    "kind": "file",
    "name": "lib/controller/selectors/index.js",
    "content": "import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:controller:sagas\");\n\nimport { createSelectorTree, createLeaf } from \"reselect-tree\";\n\nimport evm from \"lib/evm/selectors\";\nimport solidity from \"lib/solidity/selectors\";\nimport ast from \"lib/ast/selectors\";\n\n/**\n * @private\n */\nconst identity = (x) => x\n\n/**\n * controller\n */\nconst controller = createSelectorTree({\n\n  /**\n   * controller.current\n   */\n  current: {\n    /**\n     * controller.current.functionDepth\n     */\n    functionDepth: createLeaf([solidity.current.functionDepth], identity),\n\n    /**\n     * controller.current.executionContext\n     */\n    executionContext: createLeaf([evm.current.call], identity)\n  },\n\n  /**\n   * controller.next\n   */\n  next: {\n\n    /**\n     * controller.next.willJump\n     */\n    willJump: createLeaf([evm.next.step.isJump], identity),\n\n    /**\n     * controller.next.location\n     */\n    location: {\n      /**\n       * controller.next.location.sourceRange\n       */\n      sourceRange: createLeaf([solidity.next.sourceRange], identity),\n\n      /**\n       * controller.next.location.node\n       */\n      node: createLeaf([ast.next.node], identity),\n\n      /**\n       * controller.next.location.isMultiline\n       */\n      isMultiline: createLeaf([solidity.next.isMultiline], identity),\n    }\n  }\n});\n\nexport default controller;\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/controller/selectors/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 359,
    "kind": "function",
    "name": "identity",
    "selectorId": 23,
    "memberof": "lib/controller/selectors/index.js",
    "selectorDepth": 0,
    "static": true,
    "longname": "lib/controller/selectors/index.js~identity",
    "access": "private",
    "description": "",
    "lineNumber": 13,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "ignore": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 360,
    "kind": "function",
    "name": "controller",
    "selectorId": 24,
    "memberof": "lib/controller/selectors/index.js",
    "selectorDepth": 0,
    "static": true,
    "longname": "lib/controller/selectors/index.js~controller",
    "access": "public",
    "description": "controller",
    "lineNumber": 18,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 361,
    "kind": "function",
    "name": "controller.current",
    "selectorId": 25,
    "memberof": "lib/controller/selectors/index.js~controller",
    "selectorDepth": 1,
    "static": true,
    "longname": "lib/controller/selectors/index.js~controller.controller.current",
    "access": "public",
    "description": "controller.current",
    "lineNumber": 23,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 362,
    "kind": "function",
    "name": "controller.current.functionDepth",
    "selectorId": 26,
    "memberof": "lib/controller/selectors/index.js~controller.current",
    "selectorDepth": 2,
    "static": true,
    "longname": "lib/controller/selectors/index.js~controller.current.controller.current.functionDepth",
    "access": "public",
    "description": "controller.current.functionDepth",
    "lineNumber": 27,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 363,
    "kind": "function",
    "name": "controller.current.executionContext",
    "selectorId": 27,
    "memberof": "lib/controller/selectors/index.js~controller.current",
    "selectorDepth": 2,
    "static": true,
    "longname": "lib/controller/selectors/index.js~controller.current.controller.current.executionContext",
    "access": "public",
    "description": "controller.current.executionContext",
    "lineNumber": 32,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 364,
    "kind": "function",
    "name": "controller.next",
    "selectorId": 28,
    "memberof": "lib/controller/selectors/index.js~controller",
    "selectorDepth": 1,
    "static": true,
    "longname": "lib/controller/selectors/index.js~controller.controller.next",
    "access": "public",
    "description": "controller.next",
    "lineNumber": 38,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 365,
    "kind": "function",
    "name": "controller.next.willJump",
    "selectorId": 29,
    "memberof": "lib/controller/selectors/index.js~controller.next",
    "selectorDepth": 2,
    "static": true,
    "longname": "lib/controller/selectors/index.js~controller.next.controller.next.willJump",
    "access": "public",
    "description": "controller.next.willJump",
    "lineNumber": 43,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 366,
    "kind": "function",
    "name": "controller.next.location",
    "selectorId": 30,
    "memberof": "lib/controller/selectors/index.js~controller.next",
    "selectorDepth": 2,
    "static": true,
    "longname": "lib/controller/selectors/index.js~controller.next.controller.next.location",
    "access": "public",
    "description": "controller.next.location",
    "lineNumber": 48,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 367,
    "kind": "function",
    "name": "controller.next.location.sourceRange",
    "selectorId": 31,
    "memberof": "lib/controller/selectors/index.js~controller.next.location",
    "selectorDepth": 3,
    "static": true,
    "longname": "lib/controller/selectors/index.js~controller.next.location.controller.next.location.sourceRange",
    "access": "public",
    "description": "controller.next.location.sourceRange",
    "lineNumber": 52,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 368,
    "kind": "function",
    "name": "controller.next.location.node",
    "selectorId": 32,
    "memberof": "lib/controller/selectors/index.js~controller.next.location",
    "selectorDepth": 3,
    "static": true,
    "longname": "lib/controller/selectors/index.js~controller.next.location.controller.next.location.node",
    "access": "public",
    "description": "controller.next.location.node",
    "lineNumber": 57,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 369,
    "kind": "function",
    "name": "controller.next.location.isMultiline",
    "selectorId": 33,
    "memberof": "lib/controller/selectors/index.js~controller.next.location",
    "selectorDepth": 3,
    "static": true,
    "longname": "lib/controller/selectors/index.js~controller.next.location.controller.next.location.isMultiline",
    "access": "public",
    "description": "controller.next.location.isMultiline",
    "lineNumber": 62,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 370,
    "kind": "file",
    "name": "lib/data/selectors/index.js",
    "content": "import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:data:selectors\");\n\nimport { createSelectorTree, createLeaf } from \"reselect-tree\";\nimport jsonpointer from \"json-pointer\";\n\nimport ast from \"lib/ast/selectors\";\nimport evm from \"lib/evm/selectors\";\nimport context from \"lib/context/selectors\";\n\nimport decode from \"../decode\";\nimport * as decodeUtils from \"../decode/utils\";\n\nimport { BigNumber } from \"bignumber.js\";\n\nfunction cleanBigNumbers(value) {\n  if (BigNumber.isBigNumber(value)) {\n    return value.toNumber();\n\n  } else if (value && value.map != undefined) {\n    return value.map( (inner) => cleanBigNumbers(inner) );\n\n  } else if (value && typeof value == \"object\") {\n    return Object.assign(\n      {}, ...Object.entries(value)\n        .map( ([key, inner]) => ({ [key]: cleanBigNumbers(inner) }) )\n    );\n\n  } else {\n    return value;\n  }\n}\n\nconst data = createSelectorTree({\n  /**\n   * data.views\n   */\n  views: {\n    ast: {\n      current: createLeaf(\n        [ast.current.tree, ast.current.index], (tree, id) => ({tree, id})\n      ),\n\n      next: createLeaf(\n        [ast.next.node, ast.next.pointer], (node, pointer) => ({node, pointer})\n      )\n    }\n  },\n\n  /**\n   * data.scopes\n   */\n  scopes: {\n\n    /**\n     * data.scopes.tables\n     */\n    tables: {\n\n      /**\n       * data.scopes.tables.current\n       *\n       * scopes map for current context\n       */\n      current: createLeaf(\n        [evm.current.call, context.indexBy, (state) => state.data],\n\n        ({address, binary}, indexBy, data) => {\n          let index = address ? indexBy.address(address) : indexBy.binary(binary);\n          return data[index];\n        }\n      ),\n\n      inlined: {\n        /**\n         * data.scopes.tables.inlined.current\n         *\n         * current scope table with inlined AST nodes\n         */\n        current: createLeaf(\n          [\"/scopes/tables/current\", ast.current.tree],\n\n          (table, tree) => Object.assign(\n            {}, ...Object.entries(table).map(\n              ([id, entry]) => ({\n                [id]: {\n                  ...entry,\n\n                  definition: jsonpointer.get(tree, entry.pointer)\n                }\n              })\n            )\n          )\n        )\n      }\n    },\n\n    /**\n     * data.scopes.current\n     */\n    current: {\n\n      /**\n       * data.scopes.current.id\n       *\n       * data scope for current operation\n       */\n      id: createLeaf(\n        [ast.next.node], (node) => node.id\n      )\n    }\n  },\n\n  current: {\n    stack: createLeaf(\n      [evm.next.state.stack],\n\n      (words) => (words || []).map(\n        (word) => decodeUtils.toBytes(decodeUtils.toBigNumber(word, decodeUtils.WORD_SIZE))\n      )\n    ),\n\n    memory: createLeaf(\n      [evm.next.state.memory],\n\n      (words) => new Uint8Array(\n        (words.join(\"\").match(/.{1,2}/g) || [])\n          .map( (byte) => parseInt(byte, 16) )\n      )\n    ),\n\n    storage: createLeaf(\n      [evm.next.state.storage],\n\n      (mapping) => Object.assign(\n        {}, ...Object.entries(mapping).map( ([ address, word ]) =>\n          ({\n            [`0x${address}`]: new Uint8Array(\n              (word.match(/.{1,2}/g) || [])\n                .map( (byte) => parseInt(byte, 16) )\n            )\n          })\n        )\n      )\n    )\n  },\n\n  /**\n   * data.identifiers\n   */\n  identifiers: {\n\n    /**\n     * data.identifiers.current\n     *\n     * map of current identifiers to precise value\n     */\n    current: createLeaf(\n      [\n        \"/scopes/tables/inlined/current\",\n        \"/scopes/current/id\",\n        \"/current\"\n      ],\n\n      (refs, id, state) => {\n        let cur = id;\n        let variables = {};\n\n\n        const format = (v) => {\n          let {stack, memory, storage} = state;\n          let definition = v.definition;\n          var rawValue;\n\n          debug(\"v.ref: %o\", v.ref);\n          if (!v.ref) {\n            return undefined;\n          }\n\n          return decode(definition, v.ref, state, refs);\n        };\n\n        do {\n          variables = Object.assign(\n            variables,\n            ...(refs[cur].variables || [])\n              .filter( (v) => variables[v.name] == undefined )\n              .map( (v) => ({ [v.name]: format(refs[v.id]) }) )\n          );\n\n          cur = refs[cur].parentId;\n        } while (cur != null);\n\n        return variables;\n      }\n    ),\n\n    /**\n     * data.identifiers.native.current\n     *\n     * stripped of bignumbers\n     */\n    native: {\n      current: createLeaf(['/identifiers/current'], cleanBigNumbers)\n    }\n  }\n});\n\nexport default data;\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/data/selectors/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 371,
    "kind": "function",
    "name": "views",
    "selectorId": 34,
    "memberof": "lib/data/selectors/index.js",
    "selectorDepth": 0,
    "static": true,
    "longname": "lib/data/selectors/index.js~views",
    "access": "public",
    "description": "data.views",
    "lineNumber": 38,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 372,
    "kind": "function",
    "name": "scopes",
    "selectorId": 35,
    "memberof": "lib/data/selectors/index.js",
    "selectorDepth": 0,
    "static": true,
    "longname": "lib/data/selectors/index.js~scopes",
    "access": "public",
    "description": "data.scopes",
    "lineNumber": 53,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 373,
    "kind": "function",
    "name": "scopes.tables",
    "selectorId": 36,
    "memberof": "lib/data/selectors/index.js~scopes",
    "selectorDepth": 1,
    "static": true,
    "longname": "lib/data/selectors/index.js~scopes.scopes.tables",
    "access": "public",
    "description": "data.scopes.tables",
    "lineNumber": 58,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 374,
    "kind": "function",
    "name": "scopes.tables.current",
    "selectorId": 37,
    "memberof": "lib/data/selectors/index.js~scopes.tables",
    "selectorDepth": 2,
    "static": true,
    "longname": "lib/data/selectors/index.js~scopes.tables.scopes.tables.current",
    "access": "public",
    "description": "data.scopes.tables.current\n\nscopes map for current context",
    "lineNumber": 65,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 375,
    "kind": "function",
    "name": "scopes.tables.current",
    "selectorId": 38,
    "memberof": "lib/data/selectors/index.js~scopes.tables",
    "selectorDepth": 2,
    "static": true,
    "longname": "lib/data/selectors/index.js~scopes.tables.scopes.tables.current",
    "access": "public",
    "description": "data.scopes.tables.inlined.current\n\ncurrent scope table with inlined AST nodes",
    "lineNumber": 80,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 376,
    "kind": "function",
    "name": "scopes.current",
    "selectorId": 39,
    "memberof": "lib/data/selectors/index.js~scopes",
    "selectorDepth": 1,
    "static": true,
    "longname": "lib/data/selectors/index.js~scopes.scopes.current",
    "access": "public",
    "description": "data.scopes.current",
    "lineNumber": 101,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 377,
    "kind": "function",
    "name": "scopes.current.id",
    "selectorId": 40,
    "memberof": "lib/data/selectors/index.js~scopes.current",
    "selectorDepth": 2,
    "static": true,
    "longname": "lib/data/selectors/index.js~scopes.current.scopes.current.id",
    "access": "public",
    "description": "data.scopes.current.id\n\ndata scope for current operation",
    "lineNumber": 108,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 378,
    "kind": "function",
    "name": "identifiers",
    "selectorId": 41,
    "memberof": "lib/data/selectors/index.js",
    "selectorDepth": 0,
    "static": true,
    "longname": "lib/data/selectors/index.js~identifiers",
    "access": "public",
    "description": "data.identifiers",
    "lineNumber": 151,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 379,
    "kind": "function",
    "name": "identifiers.current",
    "selectorId": 42,
    "memberof": "lib/data/selectors/index.js~identifiers",
    "selectorDepth": 1,
    "static": true,
    "longname": "lib/data/selectors/index.js~identifiers.identifiers.current",
    "access": "public",
    "description": "data.identifiers.current\n\nmap of current identifiers to precise value",
    "lineNumber": 158,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 380,
    "kind": "function",
    "name": "identifiers.native",
    "selectorId": 43,
    "memberof": "lib/data/selectors/index.js~identifiers",
    "selectorDepth": 1,
    "static": true,
    "longname": "lib/data/selectors/index.js~identifiers.identifiers.native",
    "access": "public",
    "description": "data.identifiers.native.current\n\nstripped of bignumbers",
    "lineNumber": 203,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 381,
    "kind": "file",
    "name": "lib/evm/selectors/index.js",
    "content": "import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:evm:selectors\");\n\nimport { createSelectorTree, createLeaf } from \"reselect-tree\";\n\nimport trace from \"lib/trace/selectors\";\n\n\nconst evm = createSelectorTree({\n\n  /**\n   * evm.current\n   */\n  current: {\n\n    /**\n     * evm.current.callstack\n     */\n    callstack: (state) => state.evm.callstack,\n\n    /**\n     * evm.current.call\n     */\n    call: createLeaf(\n      [\"./callstack\"],\n\n      (stack) => stack.length ? stack[stack.length - 1] : {}\n    ),\n\n    /**\n     * evm.current.state\n     *\n     * evm state info: as of last operation, before op defined in step\n     */\n    state: createLeaf(\n      [trace.step], ({depth, error, gas, memory, stack, storage}) =>\n        ({depth, error, gas, memory, stack, storage})\n    ),\n\n    /**\n     * evm.current.stack\n     *\n     * stack data\n     */\n    stack: createLeaf(\n      [trace.step], (step) => step.stack\n    ),\n\n    /**\n     * evm.current.memory\n     *\n     * memory data\n     */\n    memory: createLeaf(\n      [trace.step], (step) => step.memory\n    ),\n\n    /**\n     * evm.current.storage,\n     *\n     * storage data\n     */\n    storage: createLeaf(\n      [trace.step], (step) => step.storage\n    )\n  },\n\n  /**\n   * evm.next\n   */\n  next: {\n\n    /**\n     * evm.next.state\n     *\n     * evm state as a result of next step operation\n     */\n    state: Object.assign({}, ...(\n      [\n        \"depth\",\n        \"error\",\n        \"gas\",\n        \"memory\",\n        \"stack\",\n        \"storage\"\n      ].map( (param) => ({\n        [param]: createLeaf([trace.next], (step) => step[param])\n      }))\n    )),\n\n    /**\n     * evm.next.step\n     */\n    step: {\n      /**\n       * evm.next.step.trace\n       *\n       * trace step info related to next evm operation\n       */\n      trace: createLeaf(\n        [trace.step], ({gasCost, op, pc}) => ({gasCost, op, pc})\n      ),\n\n      /**\n       * evm.next.step.programCounter\n       */\n      programCounter: createLeaf(\n        [\"./trace\"], (step) => step.pc\n      ),\n\n      /**\n       * evm.next.step.isJump\n       */\n      isJump: createLeaf(\n        [\"./trace\"], (step) => (\n          step.op != \"JUMPDEST\" && step.op.indexOf(\"JUMP\") == 0\n        )\n      ),\n\n      /**\n       * evm.next.step.isCall\n       *\n       * whether the next opcode will switch to another calling context\n       */\n      isCall: createLeaf(\n        [\"./trace\"], (step) => step.op == \"CALL\" || step.op == \"DELEGATECALL\"\n      ),\n\n      /**\n       * evm.next.step.isCreate\n       */\n      isCreate: createLeaf(\n        [\"./trace\"], (step) => step.op == \"CREATE\"\n      ),\n\n      /**\n       * evm.next.step.isHalting\n       *\n       * whether the next instruction halts or returns from a calling context\n       */\n      isHalting: createLeaf(\n        [\"./trace\"], (step) => step.op == \"STOP\" || step.op == \"RETURN\"\n      ),\n\n      /**\n       * evm.next.step.callAddress\n       *\n       * address transferred to by call operation\n       */\n      callAddress: createLeaf(\n        [\"./isCall\", \"./trace\", \"/current/state\"],\n\n        (matches, step, {stack}) => {\n          if (!matches) return null;\n\n          let address = stack[stack.length - 2]\n          address = \"0x\" + address.substring(24);\n          return address;\n        }\n      ),\n\n      /**\n       * evm.next.step.createBinary\n       *\n       * binary code to execute via create operation\n       */\n      createBinary: createLeaf(\n        [\"./isCreate\", \"./trace\", \"/current/state\"],\n\n        (matches, step, {stack, memory}) => {\n          if (!matches) return null;\n\n          // Get the code that's going to be created from memory.\n          // Note we multiply by 2 because these offsets are in bytes.\n          const offset = parseInt(stack[stack.length - 2], 16) * 2;\n          const length = parseInt(stack[stack.length - 3], 16) * 2;\n\n          return \"0x\" + memory.join(\"\").substring(offset, offset + length);\n        }\n      ),\n    }\n  }\n});\n\nexport default evm;\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/evm/selectors/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 382,
    "kind": "function",
    "name": "current",
    "selectorId": 44,
    "memberof": "lib/evm/selectors/index.js",
    "selectorDepth": 0,
    "static": true,
    "longname": "lib/evm/selectors/index.js~current",
    "access": "public",
    "description": "evm.current",
    "lineNumber": 14,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 383,
    "kind": "function",
    "name": "current.callstack",
    "selectorId": 45,
    "memberof": "lib/evm/selectors/index.js~current",
    "selectorDepth": 1,
    "static": true,
    "longname": "lib/evm/selectors/index.js~current.current.callstack",
    "access": "public",
    "description": "evm.current.callstack",
    "lineNumber": 19,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 384,
    "kind": "function",
    "name": "current.call",
    "selectorId": 46,
    "memberof": "lib/evm/selectors/index.js~current",
    "selectorDepth": 1,
    "static": true,
    "longname": "lib/evm/selectors/index.js~current.current.call",
    "access": "public",
    "description": "evm.current.call",
    "lineNumber": 24,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 385,
    "kind": "function",
    "name": "current.state",
    "selectorId": 47,
    "memberof": "lib/evm/selectors/index.js~current",
    "selectorDepth": 1,
    "static": true,
    "longname": "lib/evm/selectors/index.js~current.current.state",
    "access": "public",
    "description": "evm.current.state\n\nevm state info: as of last operation, before op defined in step",
    "lineNumber": 35,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 386,
    "kind": "function",
    "name": "current.stack",
    "selectorId": 48,
    "memberof": "lib/evm/selectors/index.js~current",
    "selectorDepth": 1,
    "static": true,
    "longname": "lib/evm/selectors/index.js~current.current.stack",
    "access": "public",
    "description": "evm.current.stack\n\nstack data",
    "lineNumber": 45,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 387,
    "kind": "function",
    "name": "current.memory",
    "selectorId": 49,
    "memberof": "lib/evm/selectors/index.js~current",
    "selectorDepth": 1,
    "static": true,
    "longname": "lib/evm/selectors/index.js~current.current.memory",
    "access": "public",
    "description": "evm.current.memory\n\nmemory data",
    "lineNumber": 54,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 388,
    "kind": "function",
    "name": "current.storage",
    "selectorId": 50,
    "memberof": "lib/evm/selectors/index.js~current",
    "selectorDepth": 1,
    "static": true,
    "longname": "lib/evm/selectors/index.js~current.current.storage",
    "access": "public",
    "description": "evm.current.storage,\n\nstorage data",
    "lineNumber": 63,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 389,
    "kind": "function",
    "name": "next",
    "selectorId": 51,
    "memberof": "lib/evm/selectors/index.js",
    "selectorDepth": 0,
    "static": true,
    "longname": "lib/evm/selectors/index.js~next",
    "access": "public",
    "description": "evm.next",
    "lineNumber": 71,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 390,
    "kind": "function",
    "name": "next.step",
    "selectorId": 52,
    "memberof": "lib/evm/selectors/index.js~next",
    "selectorDepth": 1,
    "static": true,
    "longname": "lib/evm/selectors/index.js~next.next.step",
    "access": "public",
    "description": "evm.next.step",
    "lineNumber": 94,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 391,
    "kind": "function",
    "name": "next.step.trace",
    "selectorId": 53,
    "memberof": "lib/evm/selectors/index.js~next.step",
    "selectorDepth": 2,
    "static": true,
    "longname": "lib/evm/selectors/index.js~next.step.next.step.trace",
    "access": "public",
    "description": "evm.next.step.trace\n\ntrace step info related to next evm operation",
    "lineNumber": 100,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 392,
    "kind": "function",
    "name": "next.step.programCounter",
    "selectorId": 54,
    "memberof": "lib/evm/selectors/index.js~next.step",
    "selectorDepth": 2,
    "static": true,
    "longname": "lib/evm/selectors/index.js~next.step.next.step.programCounter",
    "access": "public",
    "description": "evm.next.step.programCounter",
    "lineNumber": 107,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 393,
    "kind": "function",
    "name": "next.step.isJump",
    "selectorId": 55,
    "memberof": "lib/evm/selectors/index.js~next.step",
    "selectorDepth": 2,
    "static": true,
    "longname": "lib/evm/selectors/index.js~next.step.next.step.isJump",
    "access": "public",
    "description": "evm.next.step.isJump",
    "lineNumber": 114,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 394,
    "kind": "function",
    "name": "next.step.isCall",
    "selectorId": 56,
    "memberof": "lib/evm/selectors/index.js~next.step",
    "selectorDepth": 2,
    "static": true,
    "longname": "lib/evm/selectors/index.js~next.step.next.step.isCall",
    "access": "public",
    "description": "evm.next.step.isCall\n\nwhether the next opcode will switch to another calling context",
    "lineNumber": 125,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 395,
    "kind": "function",
    "name": "next.step.isCreate",
    "selectorId": 57,
    "memberof": "lib/evm/selectors/index.js~next.step",
    "selectorDepth": 2,
    "static": true,
    "longname": "lib/evm/selectors/index.js~next.step.next.step.isCreate",
    "access": "public",
    "description": "evm.next.step.isCreate",
    "lineNumber": 132,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 396,
    "kind": "function",
    "name": "next.step.isHalting",
    "selectorId": 58,
    "memberof": "lib/evm/selectors/index.js~next.step",
    "selectorDepth": 2,
    "static": true,
    "longname": "lib/evm/selectors/index.js~next.step.next.step.isHalting",
    "access": "public",
    "description": "evm.next.step.isHalting\n\nwhether the next instruction halts or returns from a calling context",
    "lineNumber": 141,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 397,
    "kind": "function",
    "name": "next.step.callAddress",
    "selectorId": 59,
    "memberof": "lib/evm/selectors/index.js~next.step",
    "selectorDepth": 2,
    "static": true,
    "longname": "lib/evm/selectors/index.js~next.step.next.step.callAddress",
    "access": "public",
    "description": "evm.next.step.callAddress\n\naddress transferred to by call operation",
    "lineNumber": 150,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 398,
    "kind": "function",
    "name": "next.step.createBinary",
    "selectorId": 60,
    "memberof": "lib/evm/selectors/index.js~next.step",
    "selectorDepth": 2,
    "static": true,
    "longname": "lib/evm/selectors/index.js~next.step.next.step.createBinary",
    "access": "public",
    "description": "evm.next.step.createBinary\n\nbinary code to execute via create operation",
    "lineNumber": 167,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 399,
    "kind": "file",
    "name": "lib/solidity/selectors/index.js",
    "content": "import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:solidity:selectors\");\n\nimport { createSelectorTree, createLeaf } from \"reselect-tree\";\nimport SolidityUtils from \"truffle-solidity-utils\";\nimport CodeUtils from \"truffle-code-utils\";\n\nimport context from \"lib/context/selectors\";\nimport evm from \"lib/evm/selectors\";\n\n\nlet solidity = createSelectorTree({\n  /**\n   * solidity.current\n   */\n  current: {\n\n    /**\n     * solidity.current.functionDepth\n     */\n    functionDepth: (state) => state.solidity.functionDepth,\n\n    /**\n     * solidity.current.instructions\n     */\n    instructions: createLeaf(\n      [context.current], (context) => {\n        debug(\"context: %o\", context);\n        let instructions = CodeUtils.parseCode(context.binary);\n\n        let sourceMap = context.sourceMap;\n        if (!sourceMap) {\n          // Let's create a source map to use since none exists. This source map\n          // maps just as many ranges as there are instructions, and ensures every\n          // instruction is marked as \"jumping out\". This will ensure all\n          // available debugger commands step one instruction at a time.\n          //\n          // This is kindof a hack; perhaps this should be broken out into separate\n          // context types. TODO\n          sourceMap = \"\";\n          for (var i = 0; i < instructions.length; i++) {\n            sourceMap += i + \":\" + i + \":1:o;\";\n          }\n        }\n\n        var lineAndColumnMapping = SolidityUtils.getCharacterOffsetToLineAndColumnMapping(context.source || \"\");\n        var humanReadableSourceMap = SolidityUtils.getHumanReadableSourceMap(sourceMap);\n\n        instructions.forEach(function(instruction, instructionIndex) {\n          var sourceMapInstruction = humanReadableSourceMap[instructionIndex];\n\n          instruction.index = instructionIndex;\n\n          if (sourceMapInstruction) {\n            instruction.jump = sourceMapInstruction.jump;\n            instruction.start = sourceMapInstruction.start;\n            instruction.length = sourceMapInstruction.length;\n            instruction.range = {\n              start: lineAndColumnMapping[sourceMapInstruction.start],\n              end: lineAndColumnMapping[sourceMapInstruction.start + sourceMapInstruction.length]\n            }\n          }\n        });\n        debug(\"instructions: %O\", instructions.filter((i) => i.jump != \"-\"));\n\n        return instructions;\n      }\n    ),\n\n    /**\n     * solidity.current.instructionAtProgramCounter\n     */\n    instructionAtProgramCounter: createLeaf(\n      [\"./instructions\"],\n\n      (instructions) => {\n        let map = [];\n        instructions.forEach(function(instruction) {\n          map[instruction.pc] = instruction;\n        });\n        return map;\n      }\n    )\n  },\n\n  /**\n   * solidity.next\n   */\n  next: {\n\n    /**\n     * solidity.next.instruction\n     */\n    instruction: createLeaf(\n      [\"../current/instructionAtProgramCounter\", evm.next.step.programCounter],\n\n      (map, pc) => map[pc]\n    ),\n\n    /**\n     * solidity.next.sourceRange\n     */\n    sourceRange: createLeaf(\n      [\"./instruction\"],\n\n      (instruction) => {\n        return {\n          start: instruction.start,\n          length: instruction.length,\n          lines: instruction.range\n        };\n      }\n    ),\n\n    /**\n     * solidity.next.isMultiline\n     */\n    isMultiline: createLeaf(\n      [\"./sourceRange\"],\n\n      ( {lines} ) => lines.start.line != lines.end.line\n    ),\n\n    /**\n     * solidity.next.willJump\n     */\n    willJump: createLeaf([evm.next.step.isJump], (isJump) => isJump),\n\n    /**\n     * solidity.next.jumpDirection\n     */\n    jumpDirection: createLeaf(\n      [\"./instruction\"], (i) => i.jump\n    )\n  }\n});\n\nexport default solidity;\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/solidity/selectors/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 400,
    "kind": "function",
    "name": "current",
    "selectorId": 61,
    "memberof": "lib/solidity/selectors/index.js",
    "selectorDepth": 0,
    "static": true,
    "longname": "lib/solidity/selectors/index.js~current",
    "access": "public",
    "description": "solidity.current",
    "lineNumber": 16,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 401,
    "kind": "function",
    "name": "current.functionDepth",
    "selectorId": 62,
    "memberof": "lib/solidity/selectors/index.js~current",
    "selectorDepth": 1,
    "static": true,
    "longname": "lib/solidity/selectors/index.js~current.current.functionDepth",
    "access": "public",
    "description": "solidity.current.functionDepth",
    "lineNumber": 21,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 402,
    "kind": "function",
    "name": "current.instructions",
    "selectorId": 63,
    "memberof": "lib/solidity/selectors/index.js~current",
    "selectorDepth": 1,
    "static": true,
    "longname": "lib/solidity/selectors/index.js~current.current.instructions",
    "access": "public",
    "description": "solidity.current.instructions",
    "lineNumber": 26,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 403,
    "kind": "function",
    "name": "current.instructionAtProgramCounter",
    "selectorId": 64,
    "memberof": "lib/solidity/selectors/index.js~current",
    "selectorDepth": 1,
    "static": true,
    "longname": "lib/solidity/selectors/index.js~current.current.instructionAtProgramCounter",
    "access": "public",
    "description": "solidity.current.instructionAtProgramCounter",
    "lineNumber": 73,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 404,
    "kind": "function",
    "name": "next",
    "selectorId": 65,
    "memberof": "lib/solidity/selectors/index.js",
    "selectorDepth": 0,
    "static": true,
    "longname": "lib/solidity/selectors/index.js~next",
    "access": "public",
    "description": "solidity.next",
    "lineNumber": 89,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 405,
    "kind": "function",
    "name": "next.instruction",
    "selectorId": 66,
    "memberof": "lib/solidity/selectors/index.js~next",
    "selectorDepth": 1,
    "static": true,
    "longname": "lib/solidity/selectors/index.js~next.next.instruction",
    "access": "public",
    "description": "solidity.next.instruction",
    "lineNumber": 94,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 406,
    "kind": "function",
    "name": "next.sourceRange",
    "selectorId": 67,
    "memberof": "lib/solidity/selectors/index.js~next",
    "selectorDepth": 1,
    "static": true,
    "longname": "lib/solidity/selectors/index.js~next.next.sourceRange",
    "access": "public",
    "description": "solidity.next.sourceRange",
    "lineNumber": 103,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 407,
    "kind": "function",
    "name": "next.isMultiline",
    "selectorId": 68,
    "memberof": "lib/solidity/selectors/index.js~next",
    "selectorDepth": 1,
    "static": true,
    "longname": "lib/solidity/selectors/index.js~next.next.isMultiline",
    "access": "public",
    "description": "solidity.next.isMultiline",
    "lineNumber": 118,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 408,
    "kind": "function",
    "name": "next.willJump",
    "selectorId": 69,
    "memberof": "lib/solidity/selectors/index.js~next",
    "selectorDepth": 1,
    "static": true,
    "longname": "lib/solidity/selectors/index.js~next.next.willJump",
    "access": "public",
    "description": "solidity.next.willJump",
    "lineNumber": 127,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 409,
    "kind": "function",
    "name": "next.jumpDirection",
    "selectorId": 70,
    "memberof": "lib/solidity/selectors/index.js~next",
    "selectorDepth": 1,
    "static": true,
    "longname": "lib/solidity/selectors/index.js~next.next.jumpDirection",
    "access": "public",
    "description": "solidity.next.jumpDirection",
    "lineNumber": 132,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 410,
    "kind": "file",
    "name": "lib/trace/selectors/index.js",
    "content": "import { createSelectorTree, createLeaf } from \"reselect-tree\";\n\nlet trace = createSelectorTree({\n  /**\n   * trace.index\n   *\n   * current step index\n   */\n  index: (state) => state.trace.index,\n\n  /**\n   * trace.steps\n   *\n   * all trace steps\n   */\n  steps: (state) => state.trace.steps,\n\n  /**\n   * trace.stepsRemaining\n   *\n   * number of steps remaining in trace\n   */\n  stepsRemaining: createLeaf(\n    [\"./steps\", \"./index\"], (steps, index) => steps.length - index\n  ),\n\n  /**\n   * trace.step\n   *\n   * current trace step\n   */\n  step: createLeaf(\n    [\"./steps\", \"./index\"], (steps, index) => steps[index]\n  ),\n\n  /**\n   * trace.next\n   *\n   * next trace step or {}\n   */\n  next: createLeaf(\n    [\"./steps\", \"./index\"], (steps, index) =>\n      index < steps.length - 1 ? steps[index + 1] : {}\n  )\n});\n\nexport default trace;\n",
    "static": true,
    "longname": "/home/travis/build/trufflesuite/truffle-debugger/lib/trace/selectors/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 411,
    "kind": "function",
    "name": "index",
    "selectorId": 71,
    "memberof": "lib/trace/selectors/index.js",
    "selectorDepth": 0,
    "static": true,
    "longname": "lib/trace/selectors/index.js~index",
    "access": "public",
    "description": "trace.index\n\ncurrent step index",
    "lineNumber": 9,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 412,
    "kind": "function",
    "name": "steps",
    "selectorId": 72,
    "memberof": "lib/trace/selectors/index.js",
    "selectorDepth": 0,
    "static": true,
    "longname": "lib/trace/selectors/index.js~steps",
    "access": "public",
    "description": "trace.steps\n\nall trace steps",
    "lineNumber": 16,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 413,
    "kind": "function",
    "name": "stepsRemaining",
    "selectorId": 73,
    "memberof": "lib/trace/selectors/index.js",
    "selectorDepth": 0,
    "static": true,
    "longname": "lib/trace/selectors/index.js~stepsRemaining",
    "access": "public",
    "description": "trace.stepsRemaining\n\nnumber of steps remaining in trace",
    "lineNumber": 23,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 414,
    "kind": "function",
    "name": "step",
    "selectorId": 74,
    "memberof": "lib/trace/selectors/index.js",
    "selectorDepth": 0,
    "static": true,
    "longname": "lib/trace/selectors/index.js~step",
    "access": "public",
    "description": "trace.step\n\ncurrent trace step",
    "lineNumber": 32,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 415,
    "kind": "function",
    "name": "next",
    "selectorId": 75,
    "memberof": "lib/trace/selectors/index.js",
    "selectorDepth": 0,
    "static": true,
    "longname": "lib/trace/selectors/index.js~next",
    "access": "public",
    "description": "trace.next\n\nnext trace step or {}",
    "lineNumber": 41,
    "return": {
      "types": [
        "Object"
      ],
      "description": "new state"
    },
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ]
  }
]